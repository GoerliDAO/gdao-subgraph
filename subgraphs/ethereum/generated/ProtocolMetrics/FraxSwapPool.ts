// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CancelLongTermOrder extends ethereum.Event {
  get params(): CancelLongTermOrder__Params {
    return new CancelLongTermOrder__Params(this);
  }
}

export class CancelLongTermOrder__Params {
  _event: CancelLongTermOrder;

  constructor(event: CancelLongTermOrder) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sellToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get unsoldAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get buyToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get purchasedAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LongTermSwap0To1 extends ethereum.Event {
  get params(): LongTermSwap0To1__Params {
    return new LongTermSwap0To1__Params(this);
  }
}

export class LongTermSwap0To1__Params {
  _event: LongTermSwap0To1;

  constructor(event: LongTermSwap0To1) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get numberOfTimeIntervals(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LongTermSwap1To0 extends ethereum.Event {
  get params(): LongTermSwap1To0__Params {
    return new LongTermSwap1To0__Params(this);
  }
}

export class LongTermSwap1To0__Params {
  _event: LongTermSwap1To0;

  constructor(event: LongTermSwap1To0) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get numberOfTimeIntervals(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount0In(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get reserve0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserve1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class VirtualOrderExecution extends ethereum.Event {
  get params(): VirtualOrderExecution__Params {
    return new VirtualOrderExecution__Params(this);
  }
}

export class VirtualOrderExecution__Params {
  _event: VirtualOrderExecution;

  constructor(event: VirtualOrderExecution) {
    this._event = event;
  }

  get blocktimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newReserve0(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newReserve1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newTwammReserve0(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newTwammReserve1(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get token0Bought(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get token1Bought(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get token0Sold(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get token1Sold(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get expiries(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class WithdrawProceedsFromLongTermOrder extends ethereum.Event {
  get params(): WithdrawProceedsFromLongTermOrder__Params {
    return new WithdrawProceedsFromLongTermOrder__Params(this);
  }
}

export class WithdrawProceedsFromLongTermOrder__Params {
  _event: WithdrawProceedsFromLongTermOrder;

  constructor(event: WithdrawProceedsFromLongTermOrder) {
    this._event = event;
  }

  get addr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get proceedToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get proceeds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get orderExpired(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class FraxSwapPool__TWAPObservationHistoryResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTimestamp(): BigInt {
    return this.value0;
  }

  getPrice0CumulativeLast(): BigInt {
    return this.value1;
  }

  getPrice1CumulativeLast(): BigInt {
    return this.value2;
  }
}

export class FraxSwapPool__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class FraxSwapPool__getDetailedOrdersForUserResultDetailed_ordersStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get saleRate(): BigInt {
    return this[2].toBigInt();
  }

  get owner(): Address {
    return this[3].toAddress();
  }

  get sellTokenAddr(): Address {
    return this[4].toAddress();
  }

  get buyTokenAddr(): Address {
    return this[5].toAddress();
  }

  get isComplete(): boolean {
    return this[6].toBoolean();
  }
}

export class FraxSwapPool__getReserveAfterTwammResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  get_reserve0(): BigInt {
    return this.value0;
  }

  get_reserve1(): BigInt {
    return this.value1;
  }

  getLastVirtualOrderTimestamp(): BigInt {
    return this.value2;
  }

  get_twammReserve0(): BigInt {
    return this.value3;
  }

  get_twammReserve1(): BigInt {
    return this.value4;
  }
}

export class FraxSwapPool__getReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  get_reserve0(): BigInt {
    return this.value0;
  }

  get_reserve1(): BigInt {
    return this.value1;
  }

  get_blockTimestampLast(): BigInt {
    return this.value2;
  }
}

export class FraxSwapPool__getTwammOrderResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getExpirationTimestamp(): BigInt {
    return this.value1;
  }

  getSaleRate(): BigInt {
    return this.value2;
  }

  getOwner(): Address {
    return this.value3;
  }

  getSellTokenAddr(): Address {
    return this.value4;
  }

  getBuyTokenAddr(): Address {
    return this.value5;
  }
}

export class FraxSwapPool__getTwammOrderProceedsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderExpired(): boolean {
    return this.value0;
  }

  getTotalReward(): BigInt {
    return this.value1;
  }
}

export class FraxSwapPool__getTwammOrderProceedsViewResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderExpired(): boolean {
    return this.value0;
  }

  getTotalReward(): BigInt {
    return this.value1;
  }
}

export class FraxSwapPool__getTwammReservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  get_reserve0(): BigInt {
    return this.value0;
  }

  get_reserve1(): BigInt {
    return this.value1;
  }

  get_blockTimestampLast(): BigInt {
    return this.value2;
  }

  get_twammReserve0(): BigInt {
    return this.value3;
  }

  get_twammReserve1(): BigInt {
    return this.value4;
  }
}

export class FraxSwapPool__getTwammRewardFactorResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getRewardFactorPool0AtTimestamp(): BigInt {
    return this.value0;
  }

  getRewardFactorPool1AtTimestamp(): BigInt {
    return this.value1;
  }
}

export class FraxSwapPool__getTwammSalesRateEndingResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getOrderPool0SalesRateEnding(): BigInt {
    return this.value0;
  }

  getOrderPool1SalesRateEnding(): BigInt {
    return this.value1;
  }
}

export class FraxSwapPool__getTwammStateResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getToken0Rate(): BigInt {
    return this.value0;
  }

  getToken1Rate(): BigInt {
    return this.value1;
  }

  getLastVirtualOrderTimestamp(): BigInt {
    return this.value2;
  }

  getOrderTimeInterval_rtn(): BigInt {
    return this.value3;
  }

  getRewardFactorPool0(): BigInt {
    return this.value4;
  }

  getRewardFactorPool1(): BigInt {
    return this.value5;
  }
}

export class FraxSwapPool__withdrawProceedsFromLongTermSwapResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;

  constructor(value0: boolean, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getIs_expired(): boolean {
    return this.value0;
  }

  getRewardTkn(): Address {
    return this.value1;
  }

  getTotalReward(): BigInt {
    return this.value2;
  }
}

export class FraxSwapPool extends ethereum.SmartContract {
  static bind(address: Address): FraxSwapPool {
    return new FraxSwapPool("FraxSwapPool", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    const result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINIMUM_LIQUIDITY(): BigInt {
    const result = super.call(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_LIQUIDITY(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "MINIMUM_LIQUIDITY",
      "MINIMUM_LIQUIDITY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPEHASH(): Bytes {
    const result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TWAPObservationHistory(
    param0: BigInt
  ): FraxSwapPool__TWAPObservationHistoryResult {
    const result = super.call(
      "TWAPObservationHistory",
      "TWAPObservationHistory(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FraxSwapPool__TWAPObservationHistoryResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_TWAPObservationHistory(
    param0: BigInt
  ): ethereum.CallResult<FraxSwapPool__TWAPObservationHistoryResult> {
    const result = super.tryCall(
      "TWAPObservationHistory",
      "TWAPObservationHistory(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__TWAPObservationHistoryResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  allowance(param0: Address, param1: Address): BigInt {
    const result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_allowance(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    const result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    const result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(to: Address): FraxSwapPool__burnResult {
    const result = super.call("burn", "burn(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return new FraxSwapPool__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_burn(to: Address): ethereum.CallResult<FraxSwapPool__burnResult> {
    const result = super.tryCall("burn", "burn(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decimals(): i32 {
    const result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    const result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  factory(): Address {
    const result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    const result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDetailedOrdersForUser(
    user: Address,
    offset: BigInt,
    limit: BigInt
  ): Array<FraxSwapPool__getDetailedOrdersForUserResultDetailed_ordersStruct> {
    const result = super.call(
      "getDetailedOrdersForUser",
      "getDetailedOrdersForUser(address,uint256,uint256):((uint256,uint256,uint256,address,address,address,bool)[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );

    return result[0].toTupleArray<
      FraxSwapPool__getDetailedOrdersForUserResultDetailed_ordersStruct
    >();
  }

  try_getDetailedOrdersForUser(
    user: Address,
    offset: BigInt,
    limit: BigInt
  ): ethereum.CallResult<
    Array<FraxSwapPool__getDetailedOrdersForUserResultDetailed_ordersStruct>
  > {
    const result = super.tryCall(
      "getDetailedOrdersForUser",
      "getDetailedOrdersForUser(address,uint256,uint256):((uint256,uint256,uint256,address,address,address,bool)[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(limit)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        FraxSwapPool__getDetailedOrdersForUserResultDetailed_ordersStruct
      >()
    );
  }

  getNextOrderID(): BigInt {
    const result = super.call("getNextOrderID", "getNextOrderID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNextOrderID(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getNextOrderID",
      "getNextOrderID():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderIDsForUser(user: Address): Array<BigInt> {
    const result = super.call(
      "getOrderIDsForUser",
      "getOrderIDsForUser(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_getOrderIDsForUser(user: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      "getOrderIDsForUser",
      "getOrderIDsForUser(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOrderIDsForUserLength(user: Address): BigInt {
    const result = super.call(
      "getOrderIDsForUserLength",
      "getOrderIDsForUserLength(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getOrderIDsForUserLength(user: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getOrderIDsForUserLength",
      "getOrderIDsForUserLength(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveAfterTwamm(
    blockTimestamp: BigInt
  ): FraxSwapPool__getReserveAfterTwammResult {
    const result = super.call(
      "getReserveAfterTwamm",
      "getReserveAfterTwamm(uint256):(uint112,uint112,uint256,uint112,uint112)",
      [ethereum.Value.fromUnsignedBigInt(blockTimestamp)]
    );

    return new FraxSwapPool__getReserveAfterTwammResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getReserveAfterTwamm(
    blockTimestamp: BigInt
  ): ethereum.CallResult<FraxSwapPool__getReserveAfterTwammResult> {
    const result = super.tryCall(
      "getReserveAfterTwamm",
      "getReserveAfterTwamm(uint256):(uint112,uint112,uint256,uint112,uint112)",
      [ethereum.Value.fromUnsignedBigInt(blockTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getReserveAfterTwammResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getReserves(): FraxSwapPool__getReservesResult {
    const result = super.call(
      "getReserves",
      "getReserves():(uint112,uint112,uint32)",
      []
    );

    return new FraxSwapPool__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getReserves(): ethereum.CallResult<FraxSwapPool__getReservesResult> {
    const result = super.tryCall(
      "getReserves",
      "getReserves():(uint112,uint112,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getTWAPHistoryLength(): BigInt {
    const result = super.call(
      "getTWAPHistoryLength",
      "getTWAPHistoryLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTWAPHistoryLength(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTWAPHistoryLength",
      "getTWAPHistoryLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTwammOrder(orderId: BigInt): FraxSwapPool__getTwammOrderResult {
    const result = super.call(
      "getTwammOrder",
      "getTwammOrder(uint256):(uint256,uint256,uint256,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return new FraxSwapPool__getTwammOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress()
    );
  }

  try_getTwammOrder(
    orderId: BigInt
  ): ethereum.CallResult<FraxSwapPool__getTwammOrderResult> {
    const result = super.tryCall(
      "getTwammOrder",
      "getTwammOrder(uint256):(uint256,uint256,uint256,address,address,address)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress()
      )
    );
  }

  getTwammOrderProceeds(
    orderId: BigInt
  ): FraxSwapPool__getTwammOrderProceedsResult {
    const result = super.call(
      "getTwammOrderProceeds",
      "getTwammOrderProceeds(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return new FraxSwapPool__getTwammOrderProceedsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getTwammOrderProceeds(
    orderId: BigInt
  ): ethereum.CallResult<FraxSwapPool__getTwammOrderProceedsResult> {
    const result = super.tryCall(
      "getTwammOrderProceeds",
      "getTwammOrderProceeds(uint256):(bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammOrderProceedsResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getTwammOrderProceedsView(
    orderId: BigInt,
    blockTimestamp: BigInt
  ): FraxSwapPool__getTwammOrderProceedsViewResult {
    const result = super.call(
      "getTwammOrderProceedsView",
      "getTwammOrderProceedsView(uint256,uint256):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(orderId),
        ethereum.Value.fromUnsignedBigInt(blockTimestamp)
      ]
    );

    return new FraxSwapPool__getTwammOrderProceedsViewResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_getTwammOrderProceedsView(
    orderId: BigInt,
    blockTimestamp: BigInt
  ): ethereum.CallResult<FraxSwapPool__getTwammOrderProceedsViewResult> {
    const result = super.tryCall(
      "getTwammOrderProceedsView",
      "getTwammOrderProceedsView(uint256,uint256):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(orderId),
        ethereum.Value.fromUnsignedBigInt(blockTimestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammOrderProceedsViewResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  getTwammReserves(): FraxSwapPool__getTwammReservesResult {
    const result = super.call(
      "getTwammReserves",
      "getTwammReserves():(uint112,uint112,uint32,uint112,uint112)",
      []
    );

    return new FraxSwapPool__getTwammReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getTwammReserves(): ethereum.CallResult<
    FraxSwapPool__getTwammReservesResult
  > {
    const result = super.tryCall(
      "getTwammReserves",
      "getTwammReserves():(uint112,uint112,uint32,uint112,uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getTwammRewardFactor(
    _blockTimestamp: BigInt
  ): FraxSwapPool__getTwammRewardFactorResult {
    const result = super.call(
      "getTwammRewardFactor",
      "getTwammRewardFactor(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockTimestamp)]
    );

    return new FraxSwapPool__getTwammRewardFactorResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTwammRewardFactor(
    _blockTimestamp: BigInt
  ): ethereum.CallResult<FraxSwapPool__getTwammRewardFactorResult> {
    const result = super.tryCall(
      "getTwammRewardFactor",
      "getTwammRewardFactor(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammRewardFactorResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTwammSalesRateEnding(
    _blockTimestamp: BigInt
  ): FraxSwapPool__getTwammSalesRateEndingResult {
    const result = super.call(
      "getTwammSalesRateEnding",
      "getTwammSalesRateEnding(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockTimestamp)]
    );

    return new FraxSwapPool__getTwammSalesRateEndingResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTwammSalesRateEnding(
    _blockTimestamp: BigInt
  ): ethereum.CallResult<FraxSwapPool__getTwammSalesRateEndingResult> {
    const result = super.tryCall(
      "getTwammSalesRateEnding",
      "getTwammSalesRateEnding(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_blockTimestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammSalesRateEndingResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTwammState(): FraxSwapPool__getTwammStateResult {
    const result = super.call(
      "getTwammState",
      "getTwammState():(uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new FraxSwapPool__getTwammStateResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getTwammState(): ethereum.CallResult<FraxSwapPool__getTwammStateResult> {
    const result = super.tryCall(
      "getTwammState",
      "getTwammState():(uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__getTwammStateResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  kLast(): BigInt {
    const result = super.call("kLast", "kLast():(uint256)", []);

    return result[0].toBigInt();
  }

  try_kLast(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("kLast", "kLast():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longTermSwapFrom0To1(
    amount0In: BigInt,
    numberOfTimeIntervals: BigInt
  ): BigInt {
    const result = super.call(
      "longTermSwapFrom0To1",
      "longTermSwapFrom0To1(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0In),
        ethereum.Value.fromUnsignedBigInt(numberOfTimeIntervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_longTermSwapFrom0To1(
    amount0In: BigInt,
    numberOfTimeIntervals: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "longTermSwapFrom0To1",
      "longTermSwapFrom0To1(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0In),
        ethereum.Value.fromUnsignedBigInt(numberOfTimeIntervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  longTermSwapFrom1To0(
    amount1In: BigInt,
    numberOfTimeIntervals: BigInt
  ): BigInt {
    const result = super.call(
      "longTermSwapFrom1To0",
      "longTermSwapFrom1To0(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount1In),
        ethereum.Value.fromUnsignedBigInt(numberOfTimeIntervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_longTermSwapFrom1To0(
    amount1In: BigInt,
    numberOfTimeIntervals: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "longTermSwapFrom1To0",
      "longTermSwapFrom1To0(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount1In),
        ethereum.Value.fromUnsignedBigInt(numberOfTimeIntervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(to: Address): BigInt {
    const result = super.call("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);

    return result[0].toBigInt();
  }

  try_mint(to: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("mint", "mint(address):(uint256)", [
      ethereum.Value.fromAddress(to)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    const result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  newSwapsPaused(): boolean {
    const result = super.call("newSwapsPaused", "newSwapsPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_newSwapsPaused(): ethereum.CallResult<boolean> {
    const result = super.tryCall("newSwapsPaused", "newSwapsPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nonces(param0: Address): BigInt {
    const result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderIDsForUser(param0: Address, param1: BigInt): BigInt {
    const result = super.call(
      "orderIDsForUser",
      "orderIDsForUser(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_orderIDsForUser(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "orderIDsForUser",
      "orderIDsForUser(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orderTimeInterval(): BigInt {
    const result = super.call(
      "orderTimeInterval",
      "orderTimeInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_orderTimeInterval(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "orderTimeInterval",
      "orderTimeInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  price0CumulativeLast(): BigInt {
    const result = super.call(
      "price0CumulativeLast",
      "price0CumulativeLast():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_price0CumulativeLast(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "price0CumulativeLast",
      "price0CumulativeLast():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  price1CumulativeLast(): BigInt {
    const result = super.call(
      "price1CumulativeLast",
      "price1CumulativeLast():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_price1CumulativeLast(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "price1CumulativeLast",
      "price1CumulativeLast():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    const result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    const result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    const result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    const result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    const result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    const result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    const result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    const result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    const result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  twammReserve0(): BigInt {
    const result = super.call("twammReserve0", "twammReserve0():(uint112)", []);

    return result[0].toBigInt();
  }

  try_twammReserve0(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "twammReserve0",
      "twammReserve0():(uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  twammReserve1(): BigInt {
    const result = super.call("twammReserve1", "twammReserve1():(uint112)", []);

    return result[0].toBigInt();
  }

  try_twammReserve1(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "twammReserve1",
      "twammReserve1():(uint112)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  twammUpToDate(): boolean {
    const result = super.call("twammUpToDate", "twammUpToDate():(bool)", []);

    return result[0].toBoolean();
  }

  try_twammUpToDate(): ethereum.CallResult<boolean> {
    const result = super.tryCall("twammUpToDate", "twammUpToDate():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawProceedsFromLongTermSwap(
    orderId: BigInt
  ): FraxSwapPool__withdrawProceedsFromLongTermSwapResult {
    const result = super.call(
      "withdrawProceedsFromLongTermSwap",
      "withdrawProceedsFromLongTermSwap(uint256):(bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );

    return new FraxSwapPool__withdrawProceedsFromLongTermSwapResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_withdrawProceedsFromLongTermSwap(
    orderId: BigInt
  ): ethereum.CallResult<FraxSwapPool__withdrawProceedsFromLongTermSwapResult> {
    const result = super.tryCall(
      "withdrawProceedsFromLongTermSwap",
      "withdrawProceedsFromLongTermSwap(uint256):(bool,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new FraxSwapPool__withdrawProceedsFromLongTermSwapResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CancelLongTermSwapCall extends ethereum.Call {
  get inputs(): CancelLongTermSwapCall__Inputs {
    return new CancelLongTermSwapCall__Inputs(this);
  }

  get outputs(): CancelLongTermSwapCall__Outputs {
    return new CancelLongTermSwapCall__Outputs(this);
  }
}

export class CancelLongTermSwapCall__Inputs {
  _call: CancelLongTermSwapCall;

  constructor(call: CancelLongTermSwapCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelLongTermSwapCall__Outputs {
  _call: CancelLongTermSwapCall;

  constructor(call: CancelLongTermSwapCall) {
    this._call = call;
  }
}

export class ExecuteVirtualOrdersCall extends ethereum.Call {
  get inputs(): ExecuteVirtualOrdersCall__Inputs {
    return new ExecuteVirtualOrdersCall__Inputs(this);
  }

  get outputs(): ExecuteVirtualOrdersCall__Outputs {
    return new ExecuteVirtualOrdersCall__Outputs(this);
  }
}

export class ExecuteVirtualOrdersCall__Inputs {
  _call: ExecuteVirtualOrdersCall;

  constructor(call: ExecuteVirtualOrdersCall) {
    this._call = call;
  }

  get blockTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteVirtualOrdersCall__Outputs {
  _call: ExecuteVirtualOrdersCall;

  constructor(call: ExecuteVirtualOrdersCall) {
    this._call = call;
  }
}

export class GetTwammOrderProceedsCall extends ethereum.Call {
  get inputs(): GetTwammOrderProceedsCall__Inputs {
    return new GetTwammOrderProceedsCall__Inputs(this);
  }

  get outputs(): GetTwammOrderProceedsCall__Outputs {
    return new GetTwammOrderProceedsCall__Outputs(this);
  }
}

export class GetTwammOrderProceedsCall__Inputs {
  _call: GetTwammOrderProceedsCall;

  constructor(call: GetTwammOrderProceedsCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetTwammOrderProceedsCall__Outputs {
  _call: GetTwammOrderProceedsCall;

  constructor(call: GetTwammOrderProceedsCall) {
    this._call = call;
  }

  get orderExpired(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get totalReward(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LongTermSwapFrom0To1Call extends ethereum.Call {
  get inputs(): LongTermSwapFrom0To1Call__Inputs {
    return new LongTermSwapFrom0To1Call__Inputs(this);
  }

  get outputs(): LongTermSwapFrom0To1Call__Outputs {
    return new LongTermSwapFrom0To1Call__Outputs(this);
  }
}

export class LongTermSwapFrom0To1Call__Inputs {
  _call: LongTermSwapFrom0To1Call;

  constructor(call: LongTermSwapFrom0To1Call) {
    this._call = call;
  }

  get amount0In(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get numberOfTimeIntervals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LongTermSwapFrom0To1Call__Outputs {
  _call: LongTermSwapFrom0To1Call;

  constructor(call: LongTermSwapFrom0To1Call) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LongTermSwapFrom1To0Call extends ethereum.Call {
  get inputs(): LongTermSwapFrom1To0Call__Inputs {
    return new LongTermSwapFrom1To0Call__Inputs(this);
  }

  get outputs(): LongTermSwapFrom1To0Call__Outputs {
    return new LongTermSwapFrom1To0Call__Outputs(this);
  }
}

export class LongTermSwapFrom1To0Call__Inputs {
  _call: LongTermSwapFrom1To0Call;

  constructor(call: LongTermSwapFrom1To0Call) {
    this._call = call;
  }

  get amount1In(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get numberOfTimeIntervals(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LongTermSwapFrom1To0Call__Outputs {
  _call: LongTermSwapFrom1To0Call;

  constructor(call: LongTermSwapFrom1To0Call) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get liquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get amount0Out(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TogglePauseNewSwapsCall extends ethereum.Call {
  get inputs(): TogglePauseNewSwapsCall__Inputs {
    return new TogglePauseNewSwapsCall__Inputs(this);
  }

  get outputs(): TogglePauseNewSwapsCall__Outputs {
    return new TogglePauseNewSwapsCall__Outputs(this);
  }
}

export class TogglePauseNewSwapsCall__Inputs {
  _call: TogglePauseNewSwapsCall;

  constructor(call: TogglePauseNewSwapsCall) {
    this._call = call;
  }
}

export class TogglePauseNewSwapsCall__Outputs {
  _call: TogglePauseNewSwapsCall;

  constructor(call: TogglePauseNewSwapsCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawProceedsFromLongTermSwapCall extends ethereum.Call {
  get inputs(): WithdrawProceedsFromLongTermSwapCall__Inputs {
    return new WithdrawProceedsFromLongTermSwapCall__Inputs(this);
  }

  get outputs(): WithdrawProceedsFromLongTermSwapCall__Outputs {
    return new WithdrawProceedsFromLongTermSwapCall__Outputs(this);
  }
}

export class WithdrawProceedsFromLongTermSwapCall__Inputs {
  _call: WithdrawProceedsFromLongTermSwapCall;

  constructor(call: WithdrawProceedsFromLongTermSwapCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawProceedsFromLongTermSwapCall__Outputs {
  _call: WithdrawProceedsFromLongTermSwapCall;

  constructor(call: WithdrawProceedsFromLongTermSwapCall) {
    this._call = call;
  }

  get is_expired(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get rewardTkn(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get totalReward(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}
