// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class VaultDeployed extends ethereum.Event {
  get params(): VaultDeployed__Params {
    return new VaultDeployed__Params(this);
  }
}

export class VaultDeployed__Params {
  _event: VaultDeployed;

  constructor(event: VaultDeployed) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OlympusBoostedLiquidityVaultLido__auraDataResult {
  value0: BigInt;
  value1: Address;
  value2: Address;

  constructor(value0: BigInt, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getPid(): BigInt {
    return this.value0;
  }

  getAuraBooster(): Address {
    return this.value1;
  }

  getAuraRewardPool(): Address {
    return this.value2;
  }
}

export class OlympusBoostedLiquidityVaultLido__balancerDataResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getVault(): Address {
    return this.value0;
  }

  getLiquidityPool(): Address {
    return this.value1;
  }

  getBalancerHelper(): Address {
    return this.value2;
  }
}

export class OlympusBoostedLiquidityVaultLido__ethUsdPriceFeedResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFeed(): Address {
    return this.value0;
  }

  getUpdateThreshold(): BigInt {
    return this.value1;
  }
}

export class OlympusBoostedLiquidityVaultLido__getOhmSupplyChangeDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getPoolOhmShare(): BigInt {
    return this.value0;
  }

  getMintedOhm(): BigInt {
    return this.value1;
  }

  getNetBurnedOhm(): BigInt {
    return this.value2;
  }
}

export class OlympusBoostedLiquidityVaultLido__getOutstandingRewardsResultValue0Struct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get outstandingRewards(): BigInt {
    return this[1].toBigInt();
  }
}

export class OlympusBoostedLiquidityVaultLido__ohmEthPriceFeedResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFeed(): Address {
    return this.value0;
  }

  getUpdateThreshold(): BigInt {
    return this.value1;
  }
}

export class OlympusBoostedLiquidityVaultLido__requestPermissionsResultPermissionsStruct extends ethereum.Tuple {
  get keycode(): Bytes {
    return this[0].toBytes();
  }

  get funcSelector(): Bytes {
    return this[1].toBytes();
  }
}

export class OlympusBoostedLiquidityVaultLido__stethUsdPriceFeedResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFeed(): Address {
    return this.value0;
  }

  getUpdateThreshold(): BigInt {
    return this.value1;
  }
}

export class OlympusBoostedLiquidityVaultLido extends ethereum.SmartContract {
  static bind(address: Address): OlympusBoostedLiquidityVaultLido {
    return new OlympusBoostedLiquidityVaultLido(
      "OlympusBoostedLiquidityVaultLido",
      address
    );
  }

  BLREG(): Address {
    const result = super.call("BLREG", "BLREG():(address)", []);

    return result[0].toAddress();
  }

  try_BLREG(): ethereum.CallResult<Address> {
    const result = super.tryCall("BLREG", "BLREG():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  MAX_FEE(): BigInt {
    const result = super.call("MAX_FEE", "MAX_FEE():(uint32)", []);

    return result[0].toBigInt();
  }

  try_MAX_FEE(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("MAX_FEE", "MAX_FEE():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINTR(): Address {
    const result = super.call("MINTR", "MINTR():(address)", []);

    return result[0].toAddress();
  }

  try_MINTR(): ethereum.CallResult<Address> {
    const result = super.tryCall("MINTR", "MINTR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ROLES(): Address {
    const result = super.call("ROLES", "ROLES():(address)", []);

    return result[0].toAddress();
  }

  try_ROLES(): ethereum.CallResult<Address> {
    const result = super.tryCall("ROLES", "ROLES():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  TRSRY(): Address {
    const result = super.call("TRSRY", "TRSRY():(address)", []);

    return result[0].toAddress();
  }

  try_TRSRY(): ethereum.CallResult<Address> {
    const result = super.tryCall("TRSRY", "TRSRY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aura(): Address {
    const result = super.call("aura", "aura():(address)", []);

    return result[0].toAddress();
  }

  try_aura(): ethereum.CallResult<Address> {
    const result = super.tryCall("aura", "aura():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  auraData(): OlympusBoostedLiquidityVaultLido__auraDataResult {
    const result = super.call(
      "auraData",
      "auraData():(uint256,address,address)",
      []
    );

    return new OlympusBoostedLiquidityVaultLido__auraDataResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_auraData(): ethereum.CallResult<
    OlympusBoostedLiquidityVaultLido__auraDataResult
  > {
    const result = super.tryCall(
      "auraData",
      "auraData():(uint256,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusBoostedLiquidityVaultLido__auraDataResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  auraMiningLib(): Address {
    const result = super.call("auraMiningLib", "auraMiningLib():(address)", []);

    return result[0].toAddress();
  }

  try_auraMiningLib(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "auraMiningLib",
      "auraMiningLib():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bal(): Address {
    const result = super.call("bal", "bal():(address)", []);

    return result[0].toAddress();
  }

  try_bal(): ethereum.CallResult<Address> {
    const result = super.tryCall("bal", "bal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balancerData(): OlympusBoostedLiquidityVaultLido__balancerDataResult {
    const result = super.call(
      "balancerData",
      "balancerData():(address,address,address)",
      []
    );

    return new OlympusBoostedLiquidityVaultLido__balancerDataResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_balancerData(): ethereum.CallResult<
    OlympusBoostedLiquidityVaultLido__balancerDataResult
  > {
    const result = super.tryCall(
      "balancerData",
      "balancerData():(address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusBoostedLiquidityVaultLido__balancerDataResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  canWithdraw(user_: Address): boolean {
    const result = super.call("canWithdraw", "canWithdraw(address):(bool)", [
      ethereum.Value.fromAddress(user_)
    ]);

    return result[0].toBoolean();
  }

  try_canWithdraw(user_: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall("canWithdraw", "canWithdraw(address):(bool)", [
      ethereum.Value.fromAddress(user_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  circulatingOhmBurned(): BigInt {
    const result = super.call(
      "circulatingOhmBurned",
      "circulatingOhmBurned():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_circulatingOhmBurned(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "circulatingOhmBurned",
      "circulatingOhmBurned():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  configureDependencies(): Array<Bytes> {
    const result = super.call(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_configureDependencies(): ethereum.CallResult<Array<Bytes>> {
    const result = super.tryCall(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  currentFee(): BigInt {
    const result = super.call("currentFee", "currentFee():(uint64)", []);

    return result[0].toBigInt();
  }

  try_currentFee(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("currentFee", "currentFee():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deployVault(): Address {
    const result = super.call("deployVault", "deployVault():(address)", []);

    return result[0].toAddress();
  }

  try_deployVault(): ethereum.CallResult<Address> {
    const result = super.tryCall("deployVault", "deployVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployedOhm(): BigInt {
    const result = super.call("deployedOhm", "deployedOhm():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deployedOhm(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("deployedOhm", "deployedOhm():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ethUsdPriceFeed(): OlympusBoostedLiquidityVaultLido__ethUsdPriceFeedResult {
    const result = super.call(
      "ethUsdPriceFeed",
      "ethUsdPriceFeed():(address,uint48)",
      []
    );

    return new OlympusBoostedLiquidityVaultLido__ethUsdPriceFeedResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_ethUsdPriceFeed(): ethereum.CallResult<
    OlympusBoostedLiquidityVaultLido__ethUsdPriceFeedResult
  > {
    const result = super.tryCall(
      "ethUsdPriceFeed",
      "ethUsdPriceFeed():(address,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusBoostedLiquidityVaultLido__ethUsdPriceFeedResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  exchangeName(): string {
    const result = super.call("exchangeName", "exchangeName():(string)", []);

    return result[0].toString();
  }

  try_exchangeName(): ethereum.CallResult<string> {
    const result = super.tryCall("exchangeName", "exchangeName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getExpectedLpAmount(amount_: BigInt): BigInt {
    const result = super.call(
      "getExpectedLpAmount",
      "getExpectedLpAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount_)]
    );

    return result[0].toBigInt();
  }

  try_getExpectedLpAmount(amount_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getExpectedLpAmount",
      "getExpectedLpAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedPairTokenOutUser(lpAmount_: BigInt): BigInt {
    const result = super.call(
      "getExpectedPairTokenOutUser",
      "getExpectedPairTokenOutUser(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lpAmount_)]
    );

    return result[0].toBigInt();
  }

  try_getExpectedPairTokenOutUser(
    lpAmount_: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getExpectedPairTokenOutUser",
      "getExpectedPairTokenOutUser(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(lpAmount_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExpectedTokensOutProtocol(lpAmount_: BigInt): Array<BigInt> {
    const result = super.call(
      "getExpectedTokensOutProtocol",
      "getExpectedTokensOutProtocol(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(lpAmount_)]
    );

    return result[0].toBigIntArray();
  }

  try_getExpectedTokensOutProtocol(
    lpAmount_: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      "getExpectedTokensOutProtocol",
      "getExpectedTokensOutProtocol(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(lpAmount_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLpBalance(user_: Address): BigInt {
    const result = super.call("getLpBalance", "getLpBalance(address):(uint256)", [
      ethereum.Value.fromAddress(user_)
    ]);

    return result[0].toBigInt();
  }

  try_getLpBalance(user_: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getLpBalance",
      "getLpBalance(address):(uint256)",
      [ethereum.Value.fromAddress(user_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxDeposit(): BigInt {
    const result = super.call("getMaxDeposit", "getMaxDeposit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMaxDeposit(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getMaxDeposit",
      "getMaxDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOhmSupplyChangeData(): OlympusBoostedLiquidityVaultLido__getOhmSupplyChangeDataResult {
    const result = super.call(
      "getOhmSupplyChangeData",
      "getOhmSupplyChangeData():(uint256,uint256,uint256)",
      []
    );

    return new OlympusBoostedLiquidityVaultLido__getOhmSupplyChangeDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getOhmSupplyChangeData(): ethereum.CallResult<
    OlympusBoostedLiquidityVaultLido__getOhmSupplyChangeDataResult
  > {
    const result = super.tryCall(
      "getOhmSupplyChangeData",
      "getOhmSupplyChangeData():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusBoostedLiquidityVaultLido__getOhmSupplyChangeDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getOhmTknPoolPrice(): BigInt {
    const result = super.call(
      "getOhmTknPoolPrice",
      "getOhmTknPoolPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOhmTknPoolPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getOhmTknPoolPrice",
      "getOhmTknPoolPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOhmTknPrice(): BigInt {
    const result = super.call("getOhmTknPrice", "getOhmTknPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOhmTknPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getOhmTknPrice",
      "getOhmTknPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOutstandingRewards(
    user_: Address
  ): Array<
    OlympusBoostedLiquidityVaultLido__getOutstandingRewardsResultValue0Struct
  > {
    const result = super.call(
      "getOutstandingRewards",
      "getOutstandingRewards(address):((address,uint256)[])",
      [ethereum.Value.fromAddress(user_)]
    );

    return result[0].toTupleArray<
      OlympusBoostedLiquidityVaultLido__getOutstandingRewardsResultValue0Struct
    >();
  }

  try_getOutstandingRewards(
    user_: Address
  ): ethereum.CallResult<
    Array<
      OlympusBoostedLiquidityVaultLido__getOutstandingRewardsResultValue0Struct
    >
  > {
    const result = super.tryCall(
      "getOutstandingRewards",
      "getOutstandingRewards(address):((address,uint256)[])",
      [ethereum.Value.fromAddress(user_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        OlympusBoostedLiquidityVaultLido__getOutstandingRewardsResultValue0Struct
      >()
    );
  }

  getPoolOhmShare(): BigInt {
    const result = super.call(
      "getPoolOhmShare",
      "getPoolOhmShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPoolOhmShare(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getPoolOhmShare",
      "getPoolOhmShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardRate(rewardToken_: Address): BigInt {
    const result = super.call(
      "getRewardRate",
      "getRewardRate(address):(uint256)",
      [ethereum.Value.fromAddress(rewardToken_)]
    );

    return result[0].toBigInt();
  }

  try_getRewardRate(rewardToken_: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getRewardRate",
      "getRewardRate(address):(uint256)",
      [ethereum.Value.fromAddress(rewardToken_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardTokens(): Array<Address> {
    const result = super.call(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRewardTokens(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTknOhmPrice(): BigInt {
    const result = super.call("getTknOhmPrice", "getTknOhmPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTknOhmPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTknOhmPrice",
      "getTknOhmPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPairShare(user_: Address): BigInt {
    const result = super.call(
      "getUserPairShare",
      "getUserPairShare(address):(uint256)",
      [ethereum.Value.fromAddress(user_)]
    );

    return result[0].toBigInt();
  }

  try_getUserPairShare(user_: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getUserPairShare",
      "getUserPairShare(address):(uint256)",
      [ethereum.Value.fromAddress(user_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  implementation(): Address {
    const result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isActive(): boolean {
    const result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    const result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLidoBLVaultActive(): boolean {
    const result = super.call(
      "isLidoBLVaultActive",
      "isLidoBLVaultActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isLidoBLVaultActive(): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isLidoBLVaultActive",
      "isLidoBLVaultActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    const result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    const result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minWithdrawalDelay(): BigInt {
    const result = super.call(
      "minWithdrawalDelay",
      "minWithdrawalDelay():(uint48)",
      []
    );

    return result[0].toBigInt();
  }

  try_minWithdrawalDelay(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minWithdrawalDelay",
      "minWithdrawalDelay():(uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ohm(): Address {
    const result = super.call("ohm", "ohm():(address)", []);

    return result[0].toAddress();
  }

  try_ohm(): ethereum.CallResult<Address> {
    const result = super.tryCall("ohm", "ohm():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ohmEthPriceFeed(): OlympusBoostedLiquidityVaultLido__ohmEthPriceFeedResult {
    const result = super.call(
      "ohmEthPriceFeed",
      "ohmEthPriceFeed():(address,uint48)",
      []
    );

    return new OlympusBoostedLiquidityVaultLido__ohmEthPriceFeedResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_ohmEthPriceFeed(): ethereum.CallResult<
    OlympusBoostedLiquidityVaultLido__ohmEthPriceFeedResult
  > {
    const result = super.tryCall(
      "ohmEthPriceFeed",
      "ohmEthPriceFeed():(address,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusBoostedLiquidityVaultLido__ohmEthPriceFeedResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  ohmLimit(): BigInt {
    const result = super.call("ohmLimit", "ohmLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ohmLimit(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ohmLimit", "ohmLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pairToken(): Address {
    const result = super.call("pairToken", "pairToken():(address)", []);

    return result[0].toAddress();
  }

  try_pairToken(): ethereum.CallResult<Address> {
    const result = super.tryCall("pairToken", "pairToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  requestPermissions(): Array<
    OlympusBoostedLiquidityVaultLido__requestPermissionsResultPermissionsStruct
  > {
    const result = super.call(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      []
    );

    return result[0].toTupleArray<
      OlympusBoostedLiquidityVaultLido__requestPermissionsResultPermissionsStruct
    >();
  }

  try_requestPermissions(): ethereum.CallResult<
    Array<
      OlympusBoostedLiquidityVaultLido__requestPermissionsResultPermissionsStruct
    >
  > {
    const result = super.tryCall(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        OlympusBoostedLiquidityVaultLido__requestPermissionsResultPermissionsStruct
      >()
    );
  }

  stethUsdPriceFeed(): OlympusBoostedLiquidityVaultLido__stethUsdPriceFeedResult {
    const result = super.call(
      "stethUsdPriceFeed",
      "stethUsdPriceFeed():(address,uint48)",
      []
    );

    return new OlympusBoostedLiquidityVaultLido__stethUsdPriceFeedResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_stethUsdPriceFeed(): ethereum.CallResult<
    OlympusBoostedLiquidityVaultLido__stethUsdPriceFeedResult
  > {
    const result = super.tryCall(
      "stethUsdPriceFeed",
      "stethUsdPriceFeed():(address,uint48)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusBoostedLiquidityVaultLido__stethUsdPriceFeedResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  totalLp(): BigInt {
    const result = super.call("totalLp", "totalLp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLp(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalLp", "totalLp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userVaults(param0: Address): Address {
    const result = super.call("userVaults", "userVaults(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_userVaults(param0: Address): ethereum.CallResult<Address> {
    const result = super.tryCall("userVaults", "userVaults(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultOwners(param0: Address): Address {
    const result = super.call("vaultOwners", "vaultOwners(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_vaultOwners(param0: Address): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "vaultOwners",
      "vaultOwners(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get kernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenData_(): ConstructorCallTokenData_Struct {
    return changetype<ConstructorCallTokenData_Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get balancerData_(): ConstructorCallBalancerData_Struct {
    return changetype<ConstructorCallBalancerData_Struct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get auraData_(): ConstructorCallAuraData_Struct {
    return changetype<ConstructorCallAuraData_Struct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get auraMiningLib_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get ohmEthPriceFeed_(): ConstructorCallOhmEthPriceFeed_Struct {
    return changetype<ConstructorCallOhmEthPriceFeed_Struct>(
      this._call.inputValues[5].value.toTuple()
    );
  }

  get ethUsdPriceFeed_(): ConstructorCallEthUsdPriceFeed_Struct {
    return changetype<ConstructorCallEthUsdPriceFeed_Struct>(
      this._call.inputValues[6].value.toTuple()
    );
  }

  get stethUsdPriceFeed_(): ConstructorCallStethUsdPriceFeed_Struct {
    return changetype<ConstructorCallStethUsdPriceFeed_Struct>(
      this._call.inputValues[7].value.toTuple()
    );
  }

  get implementation_(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get ohmLimit_(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get fee_(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }

  get minWithdrawalDelay_(): BigInt {
    return this._call.inputValues[11].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallTokenData_Struct extends ethereum.Tuple {
  get ohm(): Address {
    return this[0].toAddress();
  }

  get pairToken(): Address {
    return this[1].toAddress();
  }

  get aura(): Address {
    return this[2].toAddress();
  }

  get bal(): Address {
    return this[3].toAddress();
  }
}

export class ConstructorCallBalancerData_Struct extends ethereum.Tuple {
  get vault(): Address {
    return this[0].toAddress();
  }

  get liquidityPool(): Address {
    return this[1].toAddress();
  }

  get balancerHelper(): Address {
    return this[2].toAddress();
  }
}

export class ConstructorCallAuraData_Struct extends ethereum.Tuple {
  get pid(): BigInt {
    return this[0].toBigInt();
  }

  get auraBooster(): Address {
    return this[1].toAddress();
  }

  get auraRewardPool(): Address {
    return this[2].toAddress();
  }
}

export class ConstructorCallOhmEthPriceFeed_Struct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get updateThreshold(): BigInt {
    return this[1].toBigInt();
  }
}

export class ConstructorCallEthUsdPriceFeed_Struct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get updateThreshold(): BigInt {
    return this[1].toBigInt();
  }
}

export class ConstructorCallStethUsdPriceFeed_Struct extends ethereum.Tuple {
  get feed(): Address {
    return this[0].toAddress();
  }

  get updateThreshold(): BigInt {
    return this[1].toBigInt();
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class BurnOhmFromVaultCall extends ethereum.Call {
  get inputs(): BurnOhmFromVaultCall__Inputs {
    return new BurnOhmFromVaultCall__Inputs(this);
  }

  get outputs(): BurnOhmFromVaultCall__Outputs {
    return new BurnOhmFromVaultCall__Outputs(this);
  }
}

export class BurnOhmFromVaultCall__Inputs {
  _call: BurnOhmFromVaultCall;

  constructor(call: BurnOhmFromVaultCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnOhmFromVaultCall__Outputs {
  _call: BurnOhmFromVaultCall;

  constructor(call: BurnOhmFromVaultCall) {
    this._call = call;
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class ChangeUpdateThresholdsCall extends ethereum.Call {
  get inputs(): ChangeUpdateThresholdsCall__Inputs {
    return new ChangeUpdateThresholdsCall__Inputs(this);
  }

  get outputs(): ChangeUpdateThresholdsCall__Outputs {
    return new ChangeUpdateThresholdsCall__Outputs(this);
  }
}

export class ChangeUpdateThresholdsCall__Inputs {
  _call: ChangeUpdateThresholdsCall;

  constructor(call: ChangeUpdateThresholdsCall) {
    this._call = call;
  }

  get ohmEthUpdateThreshold_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ethUsdUpdateThreshold_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get stethUsdUpdateThreshold_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeUpdateThresholdsCall__Outputs {
  _call: ChangeUpdateThresholdsCall;

  constructor(call: ChangeUpdateThresholdsCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall extends ethereum.Call {
  get inputs(): ConfigureDependenciesCall__Inputs {
    return new ConfigureDependenciesCall__Inputs(this);
  }

  get outputs(): ConfigureDependenciesCall__Outputs {
    return new ConfigureDependenciesCall__Outputs(this);
  }
}

export class ConfigureDependenciesCall__Inputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall__Outputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }

  get dependencies(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class DeactivateCall extends ethereum.Call {
  get inputs(): DeactivateCall__Inputs {
    return new DeactivateCall__Inputs(this);
  }

  get outputs(): DeactivateCall__Outputs {
    return new DeactivateCall__Outputs(this);
  }
}

export class DeactivateCall__Inputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class DeactivateCall__Outputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class DecreaseTotalLpCall extends ethereum.Call {
  get inputs(): DecreaseTotalLpCall__Inputs {
    return new DecreaseTotalLpCall__Inputs(this);
  }

  get outputs(): DecreaseTotalLpCall__Outputs {
    return new DecreaseTotalLpCall__Outputs(this);
  }
}

export class DecreaseTotalLpCall__Inputs {
  _call: DecreaseTotalLpCall;

  constructor(call: DecreaseTotalLpCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecreaseTotalLpCall__Outputs {
  _call: DecreaseTotalLpCall;

  constructor(call: DecreaseTotalLpCall) {
    this._call = call;
  }
}

export class DeployVaultCall extends ethereum.Call {
  get inputs(): DeployVaultCall__Inputs {
    return new DeployVaultCall__Inputs(this);
  }

  get outputs(): DeployVaultCall__Outputs {
    return new DeployVaultCall__Outputs(this);
  }
}

export class DeployVaultCall__Inputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }
}

export class DeployVaultCall__Outputs {
  _call: DeployVaultCall;

  constructor(call: DeployVaultCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class EmergencyBurnOhmCall extends ethereum.Call {
  get inputs(): EmergencyBurnOhmCall__Inputs {
    return new EmergencyBurnOhmCall__Inputs(this);
  }

  get outputs(): EmergencyBurnOhmCall__Outputs {
    return new EmergencyBurnOhmCall__Outputs(this);
  }
}

export class EmergencyBurnOhmCall__Inputs {
  _call: EmergencyBurnOhmCall;

  constructor(call: EmergencyBurnOhmCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EmergencyBurnOhmCall__Outputs {
  _call: EmergencyBurnOhmCall;

  constructor(call: EmergencyBurnOhmCall) {
    this._call = call;
  }
}

export class GetExpectedLpAmountCall extends ethereum.Call {
  get inputs(): GetExpectedLpAmountCall__Inputs {
    return new GetExpectedLpAmountCall__Inputs(this);
  }

  get outputs(): GetExpectedLpAmountCall__Outputs {
    return new GetExpectedLpAmountCall__Outputs(this);
  }
}

export class GetExpectedLpAmountCall__Inputs {
  _call: GetExpectedLpAmountCall;

  constructor(call: GetExpectedLpAmountCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetExpectedLpAmountCall__Outputs {
  _call: GetExpectedLpAmountCall;

  constructor(call: GetExpectedLpAmountCall) {
    this._call = call;
  }

  get bptAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetExpectedPairTokenOutUserCall extends ethereum.Call {
  get inputs(): GetExpectedPairTokenOutUserCall__Inputs {
    return new GetExpectedPairTokenOutUserCall__Inputs(this);
  }

  get outputs(): GetExpectedPairTokenOutUserCall__Outputs {
    return new GetExpectedPairTokenOutUserCall__Outputs(this);
  }
}

export class GetExpectedPairTokenOutUserCall__Inputs {
  _call: GetExpectedPairTokenOutUserCall;

  constructor(call: GetExpectedPairTokenOutUserCall) {
    this._call = call;
  }

  get lpAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetExpectedPairTokenOutUserCall__Outputs {
  _call: GetExpectedPairTokenOutUserCall;

  constructor(call: GetExpectedPairTokenOutUserCall) {
    this._call = call;
  }

  get expectedTknAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetExpectedTokensOutProtocolCall extends ethereum.Call {
  get inputs(): GetExpectedTokensOutProtocolCall__Inputs {
    return new GetExpectedTokensOutProtocolCall__Inputs(this);
  }

  get outputs(): GetExpectedTokensOutProtocolCall__Outputs {
    return new GetExpectedTokensOutProtocolCall__Outputs(this);
  }
}

export class GetExpectedTokensOutProtocolCall__Inputs {
  _call: GetExpectedTokensOutProtocolCall;

  constructor(call: GetExpectedTokensOutProtocolCall) {
    this._call = call;
  }

  get lpAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetExpectedTokensOutProtocolCall__Outputs {
  _call: GetExpectedTokensOutProtocolCall;

  constructor(call: GetExpectedTokensOutProtocolCall) {
    this._call = call;
  }

  get expectedTokenAmounts(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class IncreaseTotalLpCall extends ethereum.Call {
  get inputs(): IncreaseTotalLpCall__Inputs {
    return new IncreaseTotalLpCall__Inputs(this);
  }

  get outputs(): IncreaseTotalLpCall__Outputs {
    return new IncreaseTotalLpCall__Outputs(this);
  }
}

export class IncreaseTotalLpCall__Inputs {
  _call: IncreaseTotalLpCall;

  constructor(call: IncreaseTotalLpCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseTotalLpCall__Outputs {
  _call: IncreaseTotalLpCall;

  constructor(call: IncreaseTotalLpCall) {
    this._call = call;
  }
}

export class MintOhmToVaultCall extends ethereum.Call {
  get inputs(): MintOhmToVaultCall__Inputs {
    return new MintOhmToVaultCall__Inputs(this);
  }

  get outputs(): MintOhmToVaultCall__Outputs {
    return new MintOhmToVaultCall__Outputs(this);
  }
}

export class MintOhmToVaultCall__Inputs {
  _call: MintOhmToVaultCall;

  constructor(call: MintOhmToVaultCall) {
    this._call = call;
  }

  get amount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintOhmToVaultCall__Outputs {
  _call: MintOhmToVaultCall;

  constructor(call: MintOhmToVaultCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get newFee_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetLimitCall extends ethereum.Call {
  get inputs(): SetLimitCall__Inputs {
    return new SetLimitCall__Inputs(this);
  }

  get outputs(): SetLimitCall__Outputs {
    return new SetLimitCall__Outputs(this);
  }
}

export class SetLimitCall__Inputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }

  get newLimit_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLimitCall__Outputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }
}

export class SetWithdrawalDelayCall extends ethereum.Call {
  get inputs(): SetWithdrawalDelayCall__Inputs {
    return new SetWithdrawalDelayCall__Inputs(this);
  }

  get outputs(): SetWithdrawalDelayCall__Outputs {
    return new SetWithdrawalDelayCall__Outputs(this);
  }
}

export class SetWithdrawalDelayCall__Inputs {
  _call: SetWithdrawalDelayCall;

  constructor(call: SetWithdrawalDelayCall) {
    this._call = call;
  }

  get newDelay_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWithdrawalDelayCall__Outputs {
  _call: SetWithdrawalDelayCall;

  constructor(call: SetWithdrawalDelayCall) {
    this._call = call;
  }
}
