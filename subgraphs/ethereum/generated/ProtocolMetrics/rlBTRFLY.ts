// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class Locked extends ethereum.Event {
  get params(): Locked__Params {
    return new Locked__Params(this);
  }
}

export class Locked__Params {
  _event: Locked;

  constructor(event: Locked) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get epoch(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Shutdown extends ethereum.Event {
  get params(): Shutdown__Params {
    return new Shutdown__Params(this);
  }
}

export class Shutdown__Params {
  _event: Shutdown;

  constructor(event: Shutdown) {
    this._event = event;
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get relock(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class rlBTRFLY__balancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLocked(): BigInt {
    return this.value0;
  }

  getNextUnlockIndex(): BigInt {
    return this.value1;
  }
}

export class rlBTRFLY__lockedBalancesResultLockDataStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get unlockTime(): BigInt {
    return this[1].toBigInt();
  }
}

export class rlBTRFLY__lockedBalancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Array<rlBTRFLY__lockedBalancesResultLockDataStruct>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Array<rlBTRFLY__lockedBalancesResultLockDataStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromTupleArray(this.value3));
    return map;
  }

  getTotal(): BigInt {
    return this.value0;
  }

  getUnlockable(): BigInt {
    return this.value1;
  }

  getLocked(): BigInt {
    return this.value2;
  }

  getLockData(): Array<rlBTRFLY__lockedBalancesResultLockDataStruct> {
    return this.value3;
  }
}

export class rlBTRFLY extends ethereum.SmartContract {
  static bind(address: Address): rlBTRFLY {
    return new rlBTRFLY("rlBTRFLY", address);
  }

  EPOCH_DURATION(): BigInt {
    const result = super.call("EPOCH_DURATION", "EPOCH_DURATION():(uint32)", []);

    return result[0].toBigInt();
  }

  try_EPOCH_DURATION(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "EPOCH_DURATION",
      "EPOCH_DURATION():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LOCK_DURATION(): BigInt {
    const result = super.call("LOCK_DURATION", "LOCK_DURATION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "LOCK_DURATION",
      "LOCK_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    const result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): rlBTRFLY__balancesResult {
    const result = super.call("balances", "balances(address):(uint224,uint32)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new rlBTRFLY__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_balances(param0: Address): ethereum.CallResult<rlBTRFLY__balancesResult> {
    const result = super.tryCall(
      "balances",
      "balances(address):(uint224,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new rlBTRFLY__balancesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  btrflyV2(): Address {
    const result = super.call("btrflyV2", "btrflyV2():(address)", []);

    return result[0].toAddress();
  }

  try_btrflyV2(): ethereum.CallResult<Address> {
    const result = super.tryCall("btrflyV2", "btrflyV2():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    const result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    const result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCurrentEpoch(): BigInt {
    const result = super.call(
      "getCurrentEpoch",
      "getCurrentEpoch():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentEpoch(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getCurrentEpoch",
      "getCurrentEpoch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isShutdown(): boolean {
    const result = super.call("isShutdown", "isShutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_isShutdown(): ethereum.CallResult<boolean> {
    const result = super.tryCall("isShutdown", "isShutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedBalanceOf(account: Address): BigInt {
    const result = super.call(
      "lockedBalanceOf",
      "lockedBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_lockedBalanceOf(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "lockedBalanceOf",
      "lockedBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockedBalances(account: Address): rlBTRFLY__lockedBalancesResult {
    const result = super.call(
      "lockedBalances",
      "lockedBalances(address):(uint256,uint256,uint256,(uint224,uint32)[])",
      [ethereum.Value.fromAddress(account)]
    );

    return new rlBTRFLY__lockedBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toTupleArray<rlBTRFLY__lockedBalancesResultLockDataStruct>()
    );
  }

  try_lockedBalances(
    account: Address
  ): ethereum.CallResult<rlBTRFLY__lockedBalancesResult> {
    const result = super.tryCall(
      "lockedBalances",
      "lockedBalances(address):(uint256,uint256,uint256,(uint224,uint32)[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new rlBTRFLY__lockedBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toTupleArray<rlBTRFLY__lockedBalancesResultLockDataStruct>()
      )
    );
  }

  lockedSupply(): BigInt {
    const result = super.call("lockedSupply", "lockedSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lockedSupply(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("lockedSupply", "lockedSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    const result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    const result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingLockOf(account: Address): BigInt {
    const result = super.call(
      "pendingLockOf",
      "pendingLockOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_pendingLockOf(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "pendingLockOf",
      "pendingLockOf(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    const result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    const result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _btrflyV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class ProcessExpiredLocksCall extends ethereum.Call {
  get inputs(): ProcessExpiredLocksCall__Inputs {
    return new ProcessExpiredLocksCall__Inputs(this);
  }

  get outputs(): ProcessExpiredLocksCall__Outputs {
    return new ProcessExpiredLocksCall__Outputs(this);
  }
}

export class ProcessExpiredLocksCall__Inputs {
  _call: ProcessExpiredLocksCall;

  constructor(call: ProcessExpiredLocksCall) {
    this._call = call;
  }

  get relock(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ProcessExpiredLocksCall__Outputs {
  _call: ProcessExpiredLocksCall;

  constructor(call: ProcessExpiredLocksCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ShutdownCall extends ethereum.Call {
  get inputs(): ShutdownCall__Inputs {
    return new ShutdownCall__Inputs(this);
  }

  get outputs(): ShutdownCall__Outputs {
    return new ShutdownCall__Outputs(this);
  }
}

export class ShutdownCall__Inputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class ShutdownCall__Outputs {
  _call: ShutdownCall;

  constructor(call: ShutdownCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawExpiredLocksToCall extends ethereum.Call {
  get inputs(): WithdrawExpiredLocksToCall__Inputs {
    return new WithdrawExpiredLocksToCall__Inputs(this);
  }

  get outputs(): WithdrawExpiredLocksToCall__Outputs {
    return new WithdrawExpiredLocksToCall__Outputs(this);
  }
}

export class WithdrawExpiredLocksToCall__Inputs {
  _call: WithdrawExpiredLocksToCall;

  constructor(call: WithdrawExpiredLocksToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawExpiredLocksToCall__Outputs {
  _call: WithdrawExpiredLocksToCall;

  constructor(call: WithdrawExpiredLocksToCall) {
    this._call = call;
  }
}
