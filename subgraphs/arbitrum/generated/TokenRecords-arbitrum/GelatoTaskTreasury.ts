// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class FundsDeposited extends ethereum.Event {
  get params(): FundsDeposited__Params {
    return new FundsDeposited__Params(this);
  }
}

export class FundsDeposited__Params {
  _event: FundsDeposited;

  constructor(event: FundsDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsWithdrawn extends ethereum.Event {
  get params(): FundsWithdrawn__Params {
    return new FundsWithdrawn__Params(this);
  }
}

export class FundsWithdrawn__Params {
  _event: FundsWithdrawn;

  constructor(event: FundsWithdrawn) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initiator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogDeductFees extends ethereum.Event {
  get params(): LogDeductFees__Params {
    return new LogDeductFees__Params(this);
  }
}

export class LogDeductFees__Params {
  _event: LogDeductFees;

  constructor(event: LogDeductFees) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get executor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get fees(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get service(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class UpdatedMaxFee extends ethereum.Event {
  get params(): UpdatedMaxFee__Params {
    return new UpdatedMaxFee__Params(this);
  }
}

export class UpdatedMaxFee__Params {
  _event: UpdatedMaxFee;

  constructor(event: UpdatedMaxFee) {
    this._event = event;
  }

  get maxFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedService extends ethereum.Event {
  get params(): UpdatedService__Params {
    return new UpdatedService__Params(this);
  }
}

export class UpdatedService__Params {
  _event: UpdatedService;

  constructor(event: UpdatedService) {
    this._event = event;
  }

  get service(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get add(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class GelatoTaskTreasury extends ethereum.SmartContract {
  static bind(address: Address): GelatoTaskTreasury {
    return new GelatoTaskTreasury("GelatoTaskTreasury", address);
  }

  MIN_SHARES_IN_TREASURY(): BigInt {
    const result = super.call(
      "MIN_SHARES_IN_TREASURY",
      "MIN_SHARES_IN_TREASURY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_SHARES_IN_TREASURY(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "MIN_SHARES_IN_TREASURY",
      "MIN_SHARES_IN_TREASURY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreditTokensByUser(_user: Address): Array<Address> {
    const result = super.call(
      "getCreditTokensByUser",
      "getCreditTokensByUser(address):(address[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toAddressArray();
  }

  try_getCreditTokensByUser(
    _user: Address
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getCreditTokensByUser",
      "getCreditTokensByUser(address):(address[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTotalCreditTokensByUser(_user: Address): Array<Address> {
    const result = super.call(
      "getTotalCreditTokensByUser",
      "getTotalCreditTokensByUser(address):(address[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toAddressArray();
  }

  try_getTotalCreditTokensByUser(
    _user: Address
  ): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getTotalCreditTokensByUser",
      "getTotalCreditTokensByUser(address):(address[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWhitelistedServices(): Array<Address> {
    const result = super.call(
      "getWhitelistedServices",
      "getWhitelistedServices():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getWhitelistedServices(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getWhitelistedServices",
      "getWhitelistedServices():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  maxFee(): BigInt {
    const result = super.call("maxFee", "maxFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxFee(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("maxFee", "maxFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oldTreasury(): Address {
    const result = super.call("oldTreasury", "oldTreasury():(address)", []);

    return result[0].toAddress();
  }

  try_oldTreasury(): ethereum.CallResult<Address> {
    const result = super.tryCall("oldTreasury", "oldTreasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shares(param0: Address, param1: Address): BigInt {
    const result = super.call("shares", "shares(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_shares(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("shares", "shares(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalShares(param0: Address): BigInt {
    const result = super.call("totalShares", "totalShares(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalShares(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "totalShares",
      "totalShares(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUserTokenBalance(_user: Address, _token: Address): BigInt {
    const result = super.call(
      "totalUserTokenBalance",
      "totalUserTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_totalUserTokenBalance(
    _user: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "totalUserTokenBalance",
      "totalUserTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTokenBalance(_user: Address, _token: Address): BigInt {
    const result = super.call(
      "userTokenBalance",
      "userTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_userTokenBalance(
    _user: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "userTokenBalance",
      "userTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _oldTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DepositFundsCall extends ethereum.Call {
  get inputs(): DepositFundsCall__Inputs {
    return new DepositFundsCall__Inputs(this);
  }

  get outputs(): DepositFundsCall__Outputs {
    return new DepositFundsCall__Outputs(this);
  }
}

export class DepositFundsCall__Inputs {
  _call: DepositFundsCall;

  constructor(call: DepositFundsCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositFundsCall__Outputs {
  _call: DepositFundsCall;

  constructor(call: DepositFundsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _maxFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateMaxFeeCall extends ethereum.Call {
  get inputs(): UpdateMaxFeeCall__Inputs {
    return new UpdateMaxFeeCall__Inputs(this);
  }

  get outputs(): UpdateMaxFeeCall__Outputs {
    return new UpdateMaxFeeCall__Outputs(this);
  }
}

export class UpdateMaxFeeCall__Inputs {
  _call: UpdateMaxFeeCall;

  constructor(call: UpdateMaxFeeCall) {
    this._call = call;
  }

  get _newMaxFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxFeeCall__Outputs {
  _call: UpdateMaxFeeCall;

  constructor(call: UpdateMaxFeeCall) {
    this._call = call;
  }
}

export class UpdateWhitelistedServiceCall extends ethereum.Call {
  get inputs(): UpdateWhitelistedServiceCall__Inputs {
    return new UpdateWhitelistedServiceCall__Inputs(this);
  }

  get outputs(): UpdateWhitelistedServiceCall__Outputs {
    return new UpdateWhitelistedServiceCall__Outputs(this);
  }
}

export class UpdateWhitelistedServiceCall__Inputs {
  _call: UpdateWhitelistedServiceCall;

  constructor(call: UpdateWhitelistedServiceCall) {
    this._call = call;
  }

  get _service(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _add(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateWhitelistedServiceCall__Outputs {
  _call: UpdateWhitelistedServiceCall;

  constructor(call: UpdateWhitelistedServiceCall) {
    this._call = call;
  }
}

export class UseFundsCall extends ethereum.Call {
  get inputs(): UseFundsCall__Inputs {
    return new UseFundsCall__Inputs(this);
  }

  get outputs(): UseFundsCall__Outputs {
    return new UseFundsCall__Outputs(this);
  }
}

export class UseFundsCall__Inputs {
  _call: UseFundsCall;

  constructor(call: UseFundsCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UseFundsCall__Outputs {
  _call: UseFundsCall;

  constructor(call: UseFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
