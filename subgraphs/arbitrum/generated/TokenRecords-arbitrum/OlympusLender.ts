// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class AMOAdded extends ethereum.Event {
  get params(): AMOAdded__Params {
    return new AMOAdded__Params(this);
  }
}

export class AMOAdded__Params {
  _event: AMOAdded;

  constructor(event: AMOAdded) {
    this._event = event;
  }

  get amo(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AMORemoved extends ethereum.Event {
  get params(): AMORemoved__Params {
    return new AMORemoved__Params(this);
  }
}

export class AMORemoved__Params {
  _event: AMORemoved;

  constructor(event: AMORemoved) {
    this._event = event;
  }

  get amo(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OlympusLender__VERSIONResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getMajor(): i32 {
    return this.value0;
  }

  getMinor(): i32 {
    return this.value1;
  }
}

export class OlympusLender extends ethereum.SmartContract {
  static bind(address: Address): OlympusLender {
    return new OlympusLender("OlympusLender", address);
  }

  KEYCODE(): Bytes {
    const result = super.call("KEYCODE", "KEYCODE():(bytes5)", []);

    return result[0].toBytes();
  }

  try_KEYCODE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall("KEYCODE", "KEYCODE():(bytes5)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERSION(): OlympusLender__VERSIONResult {
    const result = super.call("VERSION", "VERSION():(uint8,uint8)", []);

    return new OlympusLender__VERSIONResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_VERSION(): ethereum.CallResult<OlympusLender__VERSIONResult> {
    const result = super.tryCall("VERSION", "VERSION():(uint8,uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new OlympusLender__VERSIONResult(value[0].toI32(), value[1].toI32())
    );
  }

  activeAMOCount(): BigInt {
    const result = super.call("activeAMOCount", "activeAMOCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_activeAMOCount(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "activeAMOCount",
      "activeAMOCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  activeAMOs(param0: BigInt): Address {
    const result = super.call("activeAMOs", "activeAMOs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_activeAMOs(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall("activeAMOs", "activeAMOs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBorrowedOhm(amo_: Address): BigInt {
    const result = super.call(
      "getBorrowedOhm",
      "getBorrowedOhm(address):(uint256)",
      [ethereum.Value.fromAddress(amo_)]
    );

    return result[0].toBigInt();
  }

  try_getBorrowedOhm(amo_: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getBorrowedOhm",
      "getBorrowedOhm(address):(uint256)",
      [ethereum.Value.fromAddress(amo_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeployedOhm(amo_: Address): BigInt {
    const result = super.call(
      "getDeployedOhm",
      "getDeployedOhm(address):(uint256)",
      [ethereum.Value.fromAddress(amo_)]
    );

    return result[0].toBigInt();
  }

  try_getDeployedOhm(amo_: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getDeployedOhm",
      "getDeployedOhm(address):(uint256)",
      [ethereum.Value.fromAddress(amo_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalBorrowedOhm(): BigInt {
    const result = super.call(
      "getTotalBorrowedOhm",
      "getTotalBorrowedOhm():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalBorrowedOhm(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTotalBorrowedOhm",
      "getTotalBorrowedOhm():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDeployedOhm(): BigInt {
    const result = super.call(
      "getTotalDeployedOhm",
      "getTotalDeployedOhm():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalDeployedOhm(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTotalDeployedOhm",
      "getTotalDeployedOhm():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAMOInstalled(param0: Address): boolean {
    const result = super.call(
      "isAMOInstalled",
      "isAMOInstalled(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isAMOInstalled(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isAMOInstalled",
      "isAMOInstalled(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    const result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    const result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get kernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class INITCall extends ethereum.Call {
  get inputs(): INITCall__Inputs {
    return new INITCall__Inputs(this);
  }

  get outputs(): INITCall__Outputs {
    return new INITCall__Outputs(this);
  }
}

export class INITCall__Inputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class INITCall__Outputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class AddAMOCall extends ethereum.Call {
  get inputs(): AddAMOCall__Inputs {
    return new AddAMOCall__Inputs(this);
  }

  get outputs(): AddAMOCall__Outputs {
    return new AddAMOCall__Outputs(this);
  }
}

export class AddAMOCall__Inputs {
  _call: AddAMOCall;

  constructor(call: AddAMOCall) {
    this._call = call;
  }

  get amo_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAMOCall__Outputs {
  _call: AddAMOCall;

  constructor(call: AddAMOCall) {
    this._call = call;
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class RemoveAMOCall extends ethereum.Call {
  get inputs(): RemoveAMOCall__Inputs {
    return new RemoveAMOCall__Inputs(this);
  }

  get outputs(): RemoveAMOCall__Outputs {
    return new RemoveAMOCall__Outputs(this);
  }
}

export class RemoveAMOCall__Inputs {
  _call: RemoveAMOCall;

  constructor(call: RemoveAMOCall) {
    this._call = call;
  }

  get amo_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAMOCall__Outputs {
  _call: RemoveAMOCall;

  constructor(call: RemoveAMOCall) {
    this._call = call;
  }
}
