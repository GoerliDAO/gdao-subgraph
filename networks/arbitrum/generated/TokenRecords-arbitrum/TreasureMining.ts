// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyWithdraw extends ethereum.Event {
  get params(): EmergencyWithdraw__Params {
    return new EmergencyWithdraw__Params(this);
  }
}

export class EmergencyWithdraw__Params {
  _event: EmergencyWithdraw;

  constructor(event: EmergencyWithdraw) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogUpdateRewards extends ethereum.Event {
  get params(): LogUpdateRewards__Params {
    return new LogUpdateRewards__Params(this);
  }
}

export class LogUpdateRewards__Params {
  _event: LogUpdateRewards;

  constructor(event: LogUpdateRewards) {
    this._event = event;
  }

  get lastRewardTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get accMagicPerShare(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasureMining__getBoostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBoost(): BigInt {
    return this.value0;
  }

  getTimelock(): BigInt {
    return this.value1;
  }
}

export class TreasureMining__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromSignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }

  getDepositAmount(): BigInt {
    return this.value0;
  }

  getLpAmount(): BigInt {
    return this.value1;
  }

  getLockedUntil(): BigInt {
    return this.value2;
  }

  getRewardDebt(): BigInt {
    return this.value3;
  }

  getLock(): i32 {
    return this.value4;
  }
}

export class TreasureMining extends ethereum.SmartContract {
  static bind(address: Address): TreasureMining {
    return new TreasureMining("TreasureMining", address);
  }

  DAY(): BigInt {
    const result = super.call("DAY", "DAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DAY(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("DAY", "DAY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LIFECYCLE(): BigInt {
    const result = super.call("LIFECYCLE", "LIFECYCLE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_LIFECYCLE(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("LIFECYCLE", "LIFECYCLE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE(): BigInt {
    const result = super.call("ONE", "ONE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ONE", "ONE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_MONTH(): BigInt {
    const result = super.call("ONE_MONTH", "ONE_MONTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_MONTH(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ONE_MONTH", "ONE_MONTH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_WEEK(): BigInt {
    const result = super.call("ONE_WEEK", "ONE_WEEK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_WEEK(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ONE_WEEK", "ONE_WEEK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  THREE_MONTHS(): BigInt {
    const result = super.call("THREE_MONTHS", "THREE_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_THREE_MONTHS(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("THREE_MONTHS", "THREE_MONTHS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TWO_WEEKS(): BigInt {
    const result = super.call("TWO_WEEKS", "TWO_WEEKS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TWO_WEEKS(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("TWO_WEEKS", "TWO_WEEKS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accMagicPerShare(): BigInt {
    const result = super.call(
      "accMagicPerShare",
      "accMagicPerShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accMagicPerShare(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "accMagicPerShare",
      "accMagicPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allUserDepositIds(param0: Address, param1: BigInt): BigInt {
    const result = super.call(
      "allUserDepositIds",
      "allUserDepositIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_allUserDepositIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "allUserDepositIds",
      "allUserDepositIds(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentId(param0: Address): BigInt {
    const result = super.call("currentId", "currentId(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_currentId(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("currentId", "currentId(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositIdIndex(param0: Address, param1: BigInt): BigInt {
    const result = super.call(
      "depositIdIndex",
      "depositIdIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositIdIndex(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "depositIdIndex",
      "depositIdIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endTimestamp(): BigInt {
    const result = super.call("endTimestamp", "endTimestamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_endTimestamp(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("endTimestamp", "endTimestamp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  excludedAddresses(param0: BigInt): Address {
    const result = super.call(
      "excludedAddresses",
      "excludedAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_excludedAddresses(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "excludedAddresses",
      "excludedAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllUserDepositIds(_user: Address): Array<BigInt> {
    const result = super.call(
      "getAllUserDepositIds",
      "getAllUserDepositIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigIntArray();
  }

  try_getAllUserDepositIds(_user: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      "getAllUserDepositIds",
      "getAllUserDepositIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBoost(_lock: i32): TreasureMining__getBoostResult {
    const result = super.call("getBoost", "getBoost(uint8):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_lock))
    ]);

    return new TreasureMining__getBoostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getBoost(
    _lock: i32
  ): ethereum.CallResult<TreasureMining__getBoostResult> {
    const result = super.tryCall(
      "getBoost",
      "getBoost(uint8):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_lock))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TreasureMining__getBoostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getExcludedAddresses(): Array<Address> {
    const result = super.call(
      "getExcludedAddresses",
      "getExcludedAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getExcludedAddresses(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getExcludedAddresses",
      "getExcludedAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isInitialized(): boolean {
    const result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    const result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardTimestamp(): BigInt {
    const result = super.call(
      "lastRewardTimestamp",
      "lastRewardTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardTimestamp(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "lastRewardTimestamp",
      "lastRewardTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  magic(): Address {
    const result = super.call("magic", "magic():(address)", []);

    return result[0].toAddress();
  }

  try_magic(): ethereum.CallResult<Address> {
    const result = super.tryCall("magic", "magic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  magicPerSecond(): BigInt {
    const result = super.call("magicPerSecond", "magicPerSecond():(uint256)", []);

    return result[0].toBigInt();
  }

  try_magicPerSecond(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "magicPerSecond",
      "magicPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  magicTotalDeposits(): BigInt {
    const result = super.call(
      "magicTotalDeposits",
      "magicTotalDeposits():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_magicTotalDeposits(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "magicTotalDeposits",
      "magicTotalDeposits():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxMagicPerSecond(): BigInt {
    const result = super.call(
      "maxMagicPerSecond",
      "maxMagicPerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxMagicPerSecond(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "maxMagicPerSecond",
      "maxMagicPerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    const result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingRewardsAll(_user: Address): BigInt {
    const result = super.call(
      "pendingRewardsAll",
      "pendingRewardsAll(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_pendingRewardsAll(_user: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "pendingRewardsAll",
      "pendingRewardsAll(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingRewardsPosition(_user: Address, _depositId: BigInt): BigInt {
    const result = super.call(
      "pendingRewardsPosition",
      "pendingRewardsPosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingRewardsPosition(
    _user: Address,
    _depositId: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "pendingRewardsPosition",
      "pendingRewardsPosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalLpToken(): BigInt {
    const result = super.call("totalLpToken", "totalLpToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLpToken(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalLpToken", "totalLpToken():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsEarned(): BigInt {
    const result = super.call(
      "totalRewardsEarned",
      "totalRewardsEarned():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRewardsEarned(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "totalRewardsEarned",
      "totalRewardsEarned():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryStake(): Address {
    const result = super.call("treasuryStake", "treasuryStake():(address)", []);

    return result[0].toAddress();
  }

  try_treasuryStake(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "treasuryStake",
      "treasuryStake():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unlockAll(): boolean {
    const result = super.call("unlockAll", "unlockAll():(bool)", []);

    return result[0].toBoolean();
  }

  try_unlockAll(): ethereum.CallResult<boolean> {
    const result = super.tryCall("unlockAll", "unlockAll():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userInfo(param0: Address, param1: BigInt): TreasureMining__userInfoResult {
    const result = super.call(
      "userInfo",
      "userInfo(address,uint256):(uint256,uint256,uint256,int256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TreasureMining__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32()
    );
  }

  try_userInfo(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TreasureMining__userInfoResult> {
    const result = super.tryCall(
      "userInfo",
      "userInfo(address,uint256):(uint256,uint256,uint256,int256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TreasureMining__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32()
      )
    );
  }

  utilization(): BigInt {
    const result = super.call("utilization", "utilization():(uint256)", []);

    return result[0].toBigInt();
  }

  try_utilization(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("utilization", "utilization():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _magic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasuryStake(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddExcludedAddressCall extends ethereum.Call {
  get inputs(): AddExcludedAddressCall__Inputs {
    return new AddExcludedAddressCall__Inputs(this);
  }

  get outputs(): AddExcludedAddressCall__Outputs {
    return new AddExcludedAddressCall__Outputs(this);
  }
}

export class AddExcludedAddressCall__Inputs {
  _call: AddExcludedAddressCall;

  constructor(call: AddExcludedAddressCall) {
    this._call = call;
  }

  get exclude(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddExcludedAddressCall__Outputs {
  _call: AddExcludedAddressCall;

  constructor(call: AddExcludedAddressCall) {
    this._call = call;
  }
}

export class BurnLeftoversCall extends ethereum.Call {
  get inputs(): BurnLeftoversCall__Inputs {
    return new BurnLeftoversCall__Inputs(this);
  }

  get outputs(): BurnLeftoversCall__Outputs {
    return new BurnLeftoversCall__Outputs(this);
  }
}

export class BurnLeftoversCall__Inputs {
  _call: BurnLeftoversCall;

  constructor(call: BurnLeftoversCall) {
    this._call = call;
  }
}

export class BurnLeftoversCall__Outputs {
  _call: BurnLeftoversCall;

  constructor(call: BurnLeftoversCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lock(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class HarvestAllCall extends ethereum.Call {
  get inputs(): HarvestAllCall__Inputs {
    return new HarvestAllCall__Inputs(this);
  }

  get outputs(): HarvestAllCall__Outputs {
    return new HarvestAllCall__Outputs(this);
  }
}

export class HarvestAllCall__Inputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }
}

export class HarvestAllCall__Outputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }
}

export class HarvestPositionCall extends ethereum.Call {
  get inputs(): HarvestPositionCall__Inputs {
    return new HarvestPositionCall__Inputs(this);
  }

  get outputs(): HarvestPositionCall__Outputs {
    return new HarvestPositionCall__Outputs(this);
  }
}

export class HarvestPositionCall__Inputs {
  _call: HarvestPositionCall;

  constructor(call: HarvestPositionCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HarvestPositionCall__Outputs {
  _call: HarvestPositionCall;

  constructor(call: HarvestPositionCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class KillCall extends ethereum.Call {
  get inputs(): KillCall__Inputs {
    return new KillCall__Inputs(this);
  }

  get outputs(): KillCall__Outputs {
    return new KillCall__Outputs(this);
  }
}

export class KillCall__Inputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class KillCall__Outputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class RemoveExcludedAddressCall extends ethereum.Call {
  get inputs(): RemoveExcludedAddressCall__Inputs {
    return new RemoveExcludedAddressCall__Inputs(this);
  }

  get outputs(): RemoveExcludedAddressCall__Outputs {
    return new RemoveExcludedAddressCall__Outputs(this);
  }
}

export class RemoveExcludedAddressCall__Inputs {
  _call: RemoveExcludedAddressCall;

  constructor(call: RemoveExcludedAddressCall) {
    this._call = call;
  }

  get include(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveExcludedAddressCall__Outputs {
  _call: RemoveExcludedAddressCall;

  constructor(call: RemoveExcludedAddressCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestAllCall extends ethereum.Call {
  get inputs(): WithdrawAndHarvestAllCall__Inputs {
    return new WithdrawAndHarvestAllCall__Inputs(this);
  }

  get outputs(): WithdrawAndHarvestAllCall__Outputs {
    return new WithdrawAndHarvestAllCall__Outputs(this);
  }
}

export class WithdrawAndHarvestAllCall__Inputs {
  _call: WithdrawAndHarvestAllCall;

  constructor(call: WithdrawAndHarvestAllCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestAllCall__Outputs {
  _call: WithdrawAndHarvestAllCall;

  constructor(call: WithdrawAndHarvestAllCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestPositionCall extends ethereum.Call {
  get inputs(): WithdrawAndHarvestPositionCall__Inputs {
    return new WithdrawAndHarvestPositionCall__Inputs(this);
  }

  get outputs(): WithdrawAndHarvestPositionCall__Outputs {
    return new WithdrawAndHarvestPositionCall__Outputs(this);
  }
}

export class WithdrawAndHarvestPositionCall__Inputs {
  _call: WithdrawAndHarvestPositionCall;

  constructor(call: WithdrawAndHarvestPositionCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawAndHarvestPositionCall__Outputs {
  _call: WithdrawAndHarvestPositionCall;

  constructor(call: WithdrawAndHarvestPositionCall) {
    this._call = call;
  }
}

export class WithdrawPositionCall extends ethereum.Call {
  get inputs(): WithdrawPositionCall__Inputs {
    return new WithdrawPositionCall__Inputs(this);
  }

  get outputs(): WithdrawPositionCall__Outputs {
    return new WithdrawPositionCall__Outputs(this);
  }
}

export class WithdrawPositionCall__Inputs {
  _call: WithdrawPositionCall;

  constructor(call: WithdrawPositionCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawPositionCall__Outputs {
  _call: WithdrawPositionCall;

  constructor(call: WithdrawPositionCall) {
    this._call = call;
  }
}
