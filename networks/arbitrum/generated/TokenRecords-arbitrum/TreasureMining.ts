// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lock(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class Harvest extends ethereum.Event {
  get params(): Harvest__Params {
    return new Harvest__Params(this);
  }
}

export class Harvest__Params {
  _event: Harvest;

  constructor(event: Harvest) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogUpdateRewards extends ethereum.Event {
  get params(): LogUpdateRewards__Params {
    return new LogUpdateRewards__Params(this);
  }
}

export class LogUpdateRewards__Params {
  _event: LogUpdateRewards;

  constructor(event: LogUpdateRewards) {
    this._event = event;
  }

  get distributedRewards(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get undistributedRewards(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lpSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get accMagicPerShare(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentBoost(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UndistributedRewardsWithdraw extends ethereum.Event {
  get params(): UndistributedRewardsWithdraw__Params {
    return new UndistributedRewardsWithdraw__Params(this);
  }
}

export class UndistributedRewardsWithdraw__Params {
  _event: UndistributedRewardsWithdraw;

  constructor(event: UndistributedRewardsWithdraw) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentBoost(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UtilizationRate extends ethereum.Event {
  get params(): UtilizationRate__Params {
    return new UtilizationRate__Params(this);
  }
}

export class UtilizationRate__Params {
  _event: UtilizationRate;

  constructor(event: UtilizationRate) {
    this._event = event;
  }

  get util(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TreasureMining__getLockBoostResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBoost(): BigInt {
    return this.value0;
  }

  getTimelock(): BigInt {
    return this.value1;
  }
}

export class TreasureMining__getRealMagicRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDistributedRewards(): BigInt {
    return this.value0;
  }

  getUndistributedRewards(): BigInt {
    return this.value1;
  }
}

export class TreasureMining__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getOriginalDepositAmount(): BigInt {
    return this.value0;
  }

  getDepositAmount(): BigInt {
    return this.value1;
  }

  getLpAmount(): BigInt {
    return this.value2;
  }

  getLockedUntil(): BigInt {
    return this.value3;
  }

  getVestingLastUpdate(): BigInt {
    return this.value4;
  }

  getRewardDebt(): BigInt {
    return this.value5;
  }

  getLock(): i32 {
    return this.value6;
  }
}

export class TreasureMining extends ethereum.SmartContract {
  static bind(address: Address): TreasureMining {
    return new TreasureMining("TreasureMining", address);
  }

  ATLAS_MINE_ADMIN_ROLE(): Bytes {
    const result = super.call(
      "ATLAS_MINE_ADMIN_ROLE",
      "ATLAS_MINE_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ATLAS_MINE_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "ATLAS_MINE_ADMIN_ROLE",
      "ATLAS_MINE_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DAY(): BigInt {
    const result = super.call("DAY", "DAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DAY(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("DAY", "DAY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    const result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONE(): BigInt {
    const result = super.call("ONE", "ONE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ONE", "ONE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_MONTH(): BigInt {
    const result = super.call("ONE_MONTH", "ONE_MONTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_MONTH(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ONE_MONTH", "ONE_MONTH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_WEEK(): BigInt {
    const result = super.call("ONE_WEEK", "ONE_WEEK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_WEEK(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("ONE_WEEK", "ONE_WEEK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SIX_MONTHS(): BigInt {
    const result = super.call("SIX_MONTHS", "SIX_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SIX_MONTHS(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("SIX_MONTHS", "SIX_MONTHS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  THREE_MONTHS(): BigInt {
    const result = super.call("THREE_MONTHS", "THREE_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_THREE_MONTHS(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("THREE_MONTHS", "THREE_MONTHS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TWELVE_MONTHS(): BigInt {
    const result = super.call("TWELVE_MONTHS", "TWELVE_MONTHS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TWELVE_MONTHS(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "TWELVE_MONTHS",
      "TWELVE_MONTHS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TWO_WEEKS(): BigInt {
    const result = super.call("TWO_WEEKS", "TWO_WEEKS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TWO_WEEKS(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("TWO_WEEKS", "TWO_WEEKS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accMagicPerShare(): BigInt {
    const result = super.call(
      "accMagicPerShare",
      "accMagicPerShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accMagicPerShare(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "accMagicPerShare",
      "accMagicPerShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  boosts(param0: Address): BigInt {
    const result = super.call("boosts", "boosts(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_boosts(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("boosts", "boosts(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calcualteVestedPrincipal(_user: Address, _depositId: BigInt): BigInt {
    const result = super.call(
      "calcualteVestedPrincipal",
      "calcualteVestedPrincipal(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );

    return result[0].toBigInt();
  }

  try_calcualteVestedPrincipal(
    _user: Address,
    _depositId: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "calcualteVestedPrincipal",
      "calcualteVestedPrincipal(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentId(param0: Address): BigInt {
    const result = super.call("currentId", "currentId(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_currentId(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("currentId", "currentId(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllUserDepositIds(_user: Address): Array<BigInt> {
    const result = super.call(
      "getAllUserDepositIds",
      "getAllUserDepositIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigIntArray();
  }

  try_getAllUserDepositIds(_user: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      "getAllUserDepositIds",
      "getAllUserDepositIds(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getExcludedAddresses(): Array<Address> {
    const result = super.call(
      "getExcludedAddresses",
      "getExcludedAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getExcludedAddresses(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "getExcludedAddresses",
      "getExcludedAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getLegionBoost(_legionGeneration: BigInt, _legionRarity: BigInt): BigInt {
    const result = super.call(
      "getLegionBoost",
      "getLegionBoost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_legionGeneration),
        ethereum.Value.fromUnsignedBigInt(_legionRarity)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLegionBoost(
    _legionGeneration: BigInt,
    _legionRarity: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getLegionBoost",
      "getLegionBoost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_legionGeneration),
        ethereum.Value.fromUnsignedBigInt(_legionRarity)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockBoost(_lock: i32): TreasureMining__getLockBoostResult {
    const result = super.call(
      "getLockBoost",
      "getLockBoost(uint8):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_lock))]
    );

    return new TreasureMining__getLockBoostResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getLockBoost(
    _lock: i32
  ): ethereum.CallResult<TreasureMining__getLockBoostResult> {
    const result = super.tryCall(
      "getLockBoost",
      "getLockBoost(uint8):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_lock))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TreasureMining__getLockBoostResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getNftBoost(_nft: Address, _tokenId: BigInt, _amount: BigInt): BigInt {
    const result = super.call(
      "getNftBoost",
      "getNftBoost(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getNftBoost(
    _nft: Address,
    _tokenId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getNftBoost",
      "getNftBoost(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_nft),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRealMagicReward(
    _magicReward: BigInt
  ): TreasureMining__getRealMagicRewardResult {
    const result = super.call(
      "getRealMagicReward",
      "getRealMagicReward(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_magicReward)]
    );

    return new TreasureMining__getRealMagicRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getRealMagicReward(
    _magicReward: BigInt
  ): ethereum.CallResult<TreasureMining__getRealMagicRewardResult> {
    const result = super.tryCall(
      "getRealMagicReward",
      "getRealMagicReward(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_magicReward)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TreasureMining__getRealMagicRewardResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    const result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    const result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    const result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakedLegions(_user: Address): Array<BigInt> {
    const result = super.call(
      "getStakedLegions",
      "getStakedLegions(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigIntArray();
  }

  try_getStakedLegions(_user: Address): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall(
      "getStakedLegions",
      "getStakedLegions(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTreasureBoost(_tokenId: BigInt, _amount: BigInt): BigInt {
    const result = super.call(
      "getTreasureBoost",
      "getTreasureBoost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTreasureBoost(
    _tokenId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTreasureBoost",
      "getTreasureBoost(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserBoost(_user: Address): BigInt {
    const result = super.call("getUserBoost", "getUserBoost(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_getUserBoost(_user: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getUserBoost",
      "getUserBoost(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVestingTime(_lock: i32): BigInt {
    const result = super.call(
      "getVestingTime",
      "getVestingTime(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_lock))]
    );

    return result[0].toBigInt();
  }

  try_getVestingTime(_lock: i32): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getVestingTime",
      "getVestingTime(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_lock))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    const result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLegion1_1(_tokenId: BigInt): boolean {
    const result = super.call("isLegion1_1", "isLegion1_1(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isLegion1_1(_tokenId: BigInt): ethereum.CallResult<boolean> {
    const result = super.tryCall("isLegion1_1", "isLegion1_1(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLegion1_1Staked(param0: Address): boolean {
    const result = super.call(
      "isLegion1_1Staked",
      "isLegion1_1Staked(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isLegion1_1Staked(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "isLegion1_1Staked",
      "isLegion1_1Staked(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  legion(): Address {
    const result = super.call("legion", "legion():(address)", []);

    return result[0].toAddress();
  }

  try_legion(): ethereum.CallResult<Address> {
    const result = super.tryCall("legion", "legion():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  legionBoostMatrix(param0: BigInt, param1: BigInt): BigInt {
    const result = super.call(
      "legionBoostMatrix",
      "legionBoostMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_legionBoostMatrix(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "legionBoostMatrix",
      "legionBoostMatrix(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  legionMetadataStore(): Address {
    const result = super.call(
      "legionMetadataStore",
      "legionMetadataStore():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_legionMetadataStore(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "legionMetadataStore",
      "legionMetadataStore():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  magic(): Address {
    const result = super.call("magic", "magic():(address)", []);

    return result[0].toAddress();
  }

  try_magic(): ethereum.CallResult<Address> {
    const result = super.tryCall("magic", "magic():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  magicTotalDeposits(): BigInt {
    const result = super.call(
      "magicTotalDeposits",
      "magicTotalDeposits():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_magicTotalDeposits(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "magicTotalDeposits",
      "magicTotalDeposits():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  masterOfCoin(): Address {
    const result = super.call("masterOfCoin", "masterOfCoin():(address)", []);

    return result[0].toAddress();
  }

  try_masterOfCoin(): ethereum.CallResult<Address> {
    const result = super.tryCall("masterOfCoin", "masterOfCoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    const result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    const result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    const result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  pendingRewardsAll(_user: Address): BigInt {
    const result = super.call(
      "pendingRewardsAll",
      "pendingRewardsAll(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_pendingRewardsAll(_user: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "pendingRewardsAll",
      "pendingRewardsAll(address):(uint256)",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingRewardsPosition(_user: Address, _depositId: BigInt): BigInt {
    const result = super.call(
      "pendingRewardsPosition",
      "pendingRewardsPosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );

    return result[0].toBigInt();
  }

  try_pendingRewardsPosition(
    _user: Address,
    _depositId: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "pendingRewardsPosition",
      "pendingRewardsPosition(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_depositId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    const result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalLpToken(): BigInt {
    const result = super.call("totalLpToken", "totalLpToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalLpToken(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("totalLpToken", "totalLpToken():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRewardsEarned(): BigInt {
    const result = super.call(
      "totalRewardsEarned",
      "totalRewardsEarned():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRewardsEarned(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "totalRewardsEarned",
      "totalRewardsEarned():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUndistributedRewards(): BigInt {
    const result = super.call(
      "totalUndistributedRewards",
      "totalUndistributedRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUndistributedRewards(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "totalUndistributedRewards",
      "totalUndistributedRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasure(): Address {
    const result = super.call("treasure", "treasure():(address)", []);

    return result[0].toAddress();
  }

  try_treasure(): ethereum.CallResult<Address> {
    const result = super.tryCall("treasure", "treasure():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasureStaked(param0: Address, param1: BigInt): BigInt {
    const result = super.call(
      "treasureStaked",
      "treasureStaked(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_treasureStaked(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "treasureStaked",
      "treasureStaked(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasureStakedAmount(param0: Address): BigInt {
    const result = super.call(
      "treasureStakedAmount",
      "treasureStakedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_treasureStakedAmount(param0: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "treasureStakedAmount",
      "treasureStakedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unlockAll(): boolean {
    const result = super.call("unlockAll", "unlockAll():(bool)", []);

    return result[0].toBoolean();
  }

  try_unlockAll(): ethereum.CallResult<boolean> {
    const result = super.tryCall("unlockAll", "unlockAll():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userInfo(param0: Address, param1: BigInt): TreasureMining__userInfoResult {
    const result = super.call(
      "userInfo",
      "userInfo(address,uint256):(uint256,uint256,uint256,uint256,uint256,int256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TreasureMining__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toI32()
    );
  }

  try_userInfo(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TreasureMining__userInfoResult> {
    const result = super.tryCall(
      "userInfo",
      "userInfo(address,uint256):(uint256,uint256,uint256,uint256,uint256,int256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TreasureMining__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toI32()
      )
    );
  }

  utilization(): BigInt {
    const result = super.call("utilization", "utilization():(uint256)", []);

    return result[0].toBigInt();
  }

  try_utilization(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("utilization", "utilization():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  utilizationOverride(): BigInt {
    const result = super.call(
      "utilizationOverride",
      "utilizationOverride():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_utilizationOverride(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "utilizationOverride",
      "utilizationOverride():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawPosition(_depositId: BigInt, _amount: BigInt): boolean {
    const result = super.call(
      "withdrawPosition",
      "withdrawPosition(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_depositId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_withdrawPosition(
    _depositId: BigInt,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "withdrawPosition",
      "withdrawPosition(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_depositId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddExcludedAddressCall extends ethereum.Call {
  get inputs(): AddExcludedAddressCall__Inputs {
    return new AddExcludedAddressCall__Inputs(this);
  }

  get outputs(): AddExcludedAddressCall__Outputs {
    return new AddExcludedAddressCall__Outputs(this);
  }
}

export class AddExcludedAddressCall__Inputs {
  _call: AddExcludedAddressCall;

  constructor(call: AddExcludedAddressCall) {
    this._call = call;
  }

  get _exclude(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddExcludedAddressCall__Outputs {
  _call: AddExcludedAddressCall;

  constructor(call: AddExcludedAddressCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lock(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class HarvestAllCall extends ethereum.Call {
  get inputs(): HarvestAllCall__Inputs {
    return new HarvestAllCall__Inputs(this);
  }

  get outputs(): HarvestAllCall__Outputs {
    return new HarvestAllCall__Outputs(this);
  }
}

export class HarvestAllCall__Inputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }
}

export class HarvestAllCall__Outputs {
  _call: HarvestAllCall;

  constructor(call: HarvestAllCall) {
    this._call = call;
  }
}

export class HarvestPositionCall extends ethereum.Call {
  get inputs(): HarvestPositionCall__Inputs {
    return new HarvestPositionCall__Inputs(this);
  }

  get outputs(): HarvestPositionCall__Outputs {
    return new HarvestPositionCall__Outputs(this);
  }
}

export class HarvestPositionCall__Inputs {
  _call: HarvestPositionCall;

  constructor(call: HarvestPositionCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class HarvestPositionCall__Outputs {
  _call: HarvestPositionCall;

  constructor(call: HarvestPositionCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _magic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _masterOfCoin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveExcludedAddressCall extends ethereum.Call {
  get inputs(): RemoveExcludedAddressCall__Inputs {
    return new RemoveExcludedAddressCall__Inputs(this);
  }

  get outputs(): RemoveExcludedAddressCall__Outputs {
    return new RemoveExcludedAddressCall__Outputs(this);
  }
}

export class RemoveExcludedAddressCall__Inputs {
  _call: RemoveExcludedAddressCall;

  constructor(call: RemoveExcludedAddressCall) {
    this._call = call;
  }

  get _excluded(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveExcludedAddressCall__Outputs {
  _call: RemoveExcludedAddressCall;

  constructor(call: RemoveExcludedAddressCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetLegionCall extends ethereum.Call {
  get inputs(): SetLegionCall__Inputs {
    return new SetLegionCall__Inputs(this);
  }

  get outputs(): SetLegionCall__Outputs {
    return new SetLegionCall__Outputs(this);
  }
}

export class SetLegionCall__Inputs {
  _call: SetLegionCall;

  constructor(call: SetLegionCall) {
    this._call = call;
  }

  get _legion(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLegionCall__Outputs {
  _call: SetLegionCall;

  constructor(call: SetLegionCall) {
    this._call = call;
  }
}

export class SetLegionMetadataStoreCall extends ethereum.Call {
  get inputs(): SetLegionMetadataStoreCall__Inputs {
    return new SetLegionMetadataStoreCall__Inputs(this);
  }

  get outputs(): SetLegionMetadataStoreCall__Outputs {
    return new SetLegionMetadataStoreCall__Outputs(this);
  }
}

export class SetLegionMetadataStoreCall__Inputs {
  _call: SetLegionMetadataStoreCall;

  constructor(call: SetLegionMetadataStoreCall) {
    this._call = call;
  }

  get _legionMetadataStore(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLegionMetadataStoreCall__Outputs {
  _call: SetLegionMetadataStoreCall;

  constructor(call: SetLegionMetadataStoreCall) {
    this._call = call;
  }
}

export class SetMagicTokenCall extends ethereum.Call {
  get inputs(): SetMagicTokenCall__Inputs {
    return new SetMagicTokenCall__Inputs(this);
  }

  get outputs(): SetMagicTokenCall__Outputs {
    return new SetMagicTokenCall__Outputs(this);
  }
}

export class SetMagicTokenCall__Inputs {
  _call: SetMagicTokenCall;

  constructor(call: SetMagicTokenCall) {
    this._call = call;
  }

  get _magic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMagicTokenCall__Outputs {
  _call: SetMagicTokenCall;

  constructor(call: SetMagicTokenCall) {
    this._call = call;
  }
}

export class SetTreasureCall extends ethereum.Call {
  get inputs(): SetTreasureCall__Inputs {
    return new SetTreasureCall__Inputs(this);
  }

  get outputs(): SetTreasureCall__Outputs {
    return new SetTreasureCall__Outputs(this);
  }
}

export class SetTreasureCall__Inputs {
  _call: SetTreasureCall;

  constructor(call: SetTreasureCall) {
    this._call = call;
  }

  get _treasure(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasureCall__Outputs {
  _call: SetTreasureCall;

  constructor(call: SetTreasureCall) {
    this._call = call;
  }
}

export class SetUtilizationOverrideCall extends ethereum.Call {
  get inputs(): SetUtilizationOverrideCall__Inputs {
    return new SetUtilizationOverrideCall__Inputs(this);
  }

  get outputs(): SetUtilizationOverrideCall__Outputs {
    return new SetUtilizationOverrideCall__Outputs(this);
  }
}

export class SetUtilizationOverrideCall__Inputs {
  _call: SetUtilizationOverrideCall;

  constructor(call: SetUtilizationOverrideCall) {
    this._call = call;
  }

  get _utilizationOverride(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetUtilizationOverrideCall__Outputs {
  _call: SetUtilizationOverrideCall;

  constructor(call: SetUtilizationOverrideCall) {
    this._call = call;
  }
}

export class StakeLegionCall extends ethereum.Call {
  get inputs(): StakeLegionCall__Inputs {
    return new StakeLegionCall__Inputs(this);
  }

  get outputs(): StakeLegionCall__Outputs {
    return new StakeLegionCall__Outputs(this);
  }
}

export class StakeLegionCall__Inputs {
  _call: StakeLegionCall;

  constructor(call: StakeLegionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeLegionCall__Outputs {
  _call: StakeLegionCall;

  constructor(call: StakeLegionCall) {
    this._call = call;
  }
}

export class StakeTreasureCall extends ethereum.Call {
  get inputs(): StakeTreasureCall__Inputs {
    return new StakeTreasureCall__Inputs(this);
  }

  get outputs(): StakeTreasureCall__Outputs {
    return new StakeTreasureCall__Outputs(this);
  }
}

export class StakeTreasureCall__Inputs {
  _call: StakeTreasureCall;

  constructor(call: StakeTreasureCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeTreasureCall__Outputs {
  _call: StakeTreasureCall;

  constructor(call: StakeTreasureCall) {
    this._call = call;
  }
}

export class ToggleUnlockAllCall extends ethereum.Call {
  get inputs(): ToggleUnlockAllCall__Inputs {
    return new ToggleUnlockAllCall__Inputs(this);
  }

  get outputs(): ToggleUnlockAllCall__Outputs {
    return new ToggleUnlockAllCall__Outputs(this);
  }
}

export class ToggleUnlockAllCall__Inputs {
  _call: ToggleUnlockAllCall;

  constructor(call: ToggleUnlockAllCall) {
    this._call = call;
  }
}

export class ToggleUnlockAllCall__Outputs {
  _call: ToggleUnlockAllCall;

  constructor(call: ToggleUnlockAllCall) {
    this._call = call;
  }
}

export class UnstakeLegionCall extends ethereum.Call {
  get inputs(): UnstakeLegionCall__Inputs {
    return new UnstakeLegionCall__Inputs(this);
  }

  get outputs(): UnstakeLegionCall__Outputs {
    return new UnstakeLegionCall__Outputs(this);
  }
}

export class UnstakeLegionCall__Inputs {
  _call: UnstakeLegionCall;

  constructor(call: UnstakeLegionCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeLegionCall__Outputs {
  _call: UnstakeLegionCall;

  constructor(call: UnstakeLegionCall) {
    this._call = call;
  }
}

export class UnstakeTreasureCall extends ethereum.Call {
  get inputs(): UnstakeTreasureCall__Inputs {
    return new UnstakeTreasureCall__Inputs(this);
  }

  get outputs(): UnstakeTreasureCall__Outputs {
    return new UnstakeTreasureCall__Outputs(this);
  }
}

export class UnstakeTreasureCall__Inputs {
  _call: UnstakeTreasureCall;

  constructor(call: UnstakeTreasureCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeTreasureCall__Outputs {
  _call: UnstakeTreasureCall;

  constructor(call: UnstakeTreasureCall) {
    this._call = call;
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestAllCall extends ethereum.Call {
  get inputs(): WithdrawAndHarvestAllCall__Inputs {
    return new WithdrawAndHarvestAllCall__Inputs(this);
  }

  get outputs(): WithdrawAndHarvestAllCall__Outputs {
    return new WithdrawAndHarvestAllCall__Outputs(this);
  }
}

export class WithdrawAndHarvestAllCall__Inputs {
  _call: WithdrawAndHarvestAllCall;

  constructor(call: WithdrawAndHarvestAllCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestAllCall__Outputs {
  _call: WithdrawAndHarvestAllCall;

  constructor(call: WithdrawAndHarvestAllCall) {
    this._call = call;
  }
}

export class WithdrawAndHarvestPositionCall extends ethereum.Call {
  get inputs(): WithdrawAndHarvestPositionCall__Inputs {
    return new WithdrawAndHarvestPositionCall__Inputs(this);
  }

  get outputs(): WithdrawAndHarvestPositionCall__Outputs {
    return new WithdrawAndHarvestPositionCall__Outputs(this);
  }
}

export class WithdrawAndHarvestPositionCall__Inputs {
  _call: WithdrawAndHarvestPositionCall;

  constructor(call: WithdrawAndHarvestPositionCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawAndHarvestPositionCall__Outputs {
  _call: WithdrawAndHarvestPositionCall;

  constructor(call: WithdrawAndHarvestPositionCall) {
    this._call = call;
  }
}

export class WithdrawPositionCall extends ethereum.Call {
  get inputs(): WithdrawPositionCall__Inputs {
    return new WithdrawPositionCall__Inputs(this);
  }

  get outputs(): WithdrawPositionCall__Outputs {
    return new WithdrawPositionCall__Outputs(this);
  }
}

export class WithdrawPositionCall__Inputs {
  _call: WithdrawPositionCall;

  constructor(call: WithdrawPositionCall) {
    this._call = call;
  }

  get _depositId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawPositionCall__Outputs {
  _call: WithdrawPositionCall;

  constructor(call: WithdrawPositionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawUndistributedRewardsCall extends ethereum.Call {
  get inputs(): WithdrawUndistributedRewardsCall__Inputs {
    return new WithdrawUndistributedRewardsCall__Inputs(this);
  }

  get outputs(): WithdrawUndistributedRewardsCall__Outputs {
    return new WithdrawUndistributedRewardsCall__Outputs(this);
  }
}

export class WithdrawUndistributedRewardsCall__Inputs {
  _call: WithdrawUndistributedRewardsCall;

  constructor(call: WithdrawUndistributedRewardsCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawUndistributedRewardsCall__Outputs {
  _call: WithdrawUndistributedRewardsCall;

  constructor(call: WithdrawUndistributedRewardsCall) {
    this._call = call;
  }
}
