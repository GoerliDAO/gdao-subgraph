// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class AllocatorActivated extends ethereum.Event {
  get params(): AllocatorActivated__Params {
    return new AllocatorActivated__Params(this);
  }
}

export class AllocatorActivated__Params {
  _event: AllocatorActivated;

  constructor(event: AllocatorActivated) {
    this._event = event;
  }
}

export class AllocatorDeactivated extends ethereum.Event {
  get params(): AllocatorDeactivated__Params {
    return new AllocatorDeactivated__Params(this);
  }
}

export class AllocatorDeactivated__Params {
  _event: AllocatorDeactivated;

  constructor(event: AllocatorDeactivated) {
    this._event = event;
  }

  get panic(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class AllocatorDeployed extends ethereum.Event {
  get params(): AllocatorDeployed__Params {
    return new AllocatorDeployed__Params(this);
  }
}

export class AllocatorDeployed__Params {
  _event: AllocatorDeployed;

  constructor(event: AllocatorDeployed) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get extender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuthorityUpdated extends ethereum.Event {
  get params(): AuthorityUpdated__Params {
    return new AuthorityUpdated__Params(this);
  }
}

export class AuthorityUpdated__Params {
  _event: AuthorityUpdated;

  constructor(event: AuthorityUpdated) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EtherReceived extends ethereum.Event {
  get params(): EtherReceived__Params {
    return new EtherReceived__Params(this);
  }
}

export class EtherReceived__Params {
  _event: EtherReceived;

  constructor(event: EtherReceived) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class LossLimitViolated extends ethereum.Event {
  get params(): LossLimitViolated__Params {
    return new LossLimitViolated__Params(this);
  }
}

export class LossLimitViolated__Params {
  _event: LossLimitViolated;

  constructor(event: LossLimitViolated) {
    this._event = event;
  }

  get lastLoss(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get dloss(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get estimatedTotalAllocated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MigrationExecuted extends ethereum.Event {
  get params(): MigrationExecuted__Params {
    return new MigrationExecuted__Params(this);
  }
}

export class MigrationExecuted__Params {
  _event: MigrationExecuted;

  constructor(event: MigrationExecuted) {
    this._event = event;
  }

  get allocator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokeAllocator__nextPayloadDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;
  value4: Bytes;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Bytes,
    value4: Bytes
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromFixedBytes(this.value3));
    map.set("value4", ethereum.Value.fromFixedBytes(this.value4));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getCycle(): BigInt {
    return this.value1;
  }

  getV(): BigInt {
    return this.value2;
  }

  getR(): Bytes {
    return this.value3;
  }

  getS(): Bytes {
    return this.value4;
  }
}

export class TokeAllocator extends ethereum.SmartContract {
  static bind(address: Address): TokeAllocator {
    return new TokeAllocator("TokeAllocator", address);
  }

  amountAllocated(id: BigInt): BigInt {
    const result = super.call(
      "amountAllocated",
      "amountAllocated(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toBigInt();
  }

  try_amountAllocated(id: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "amountAllocated",
      "amountAllocated(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  authority(): Address {
    const result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    const result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  extender(): Address {
    const result = super.call("extender", "extender():(address)", []);

    return result[0].toAddress();
  }

  try_extender(): ethereum.CallResult<Address> {
    const result = super.tryCall("extender", "extender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ids(): Array<BigInt> {
    const result = super.call("ids", "ids():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_ids(): ethereum.CallResult<Array<BigInt>> {
    const result = super.tryCall("ids", "ids():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  manager(): Address {
    const result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    const result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mayClaim(): boolean {
    const result = super.call("mayClaim", "mayClaim():(bool)", []);

    return result[0].toBoolean();
  }

  try_mayClaim(): ethereum.CallResult<boolean> {
    const result = super.tryCall("mayClaim", "mayClaim():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    const result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    const result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextPayloadData(): TokeAllocator__nextPayloadDataResult {
    const result = super.call(
      "nextPayloadData",
      "nextPayloadData():(uint128,uint64,uint64,bytes32,bytes32)",
      []
    );

    return new TokeAllocator__nextPayloadDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes(),
      result[4].toBytes()
    );
  }

  try_nextPayloadData(): ethereum.CallResult<
    TokeAllocator__nextPayloadDataResult
  > {
    const result = super.tryCall(
      "nextPayloadData",
      "nextPayloadData():(uint128,uint64,uint64,bytes32,bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TokeAllocator__nextPayloadDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes(),
        value[4].toBytes()
      )
    );
  }

  reactors(param0: BigInt): Address {
    const result = super.call("reactors", "reactors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_reactors(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall("reactors", "reactors(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardTokens(): Array<Address> {
    const result = super.call("rewardTokens", "rewardTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_rewardTokens(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "rewardTokens",
      "rewardTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  rewards(): Address {
    const result = super.call("rewards", "rewards():(address)", []);

    return result[0].toAddress();
  }

  try_rewards(): ethereum.CallResult<Address> {
    const result = super.tryCall("rewards", "rewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  staking(): Address {
    const result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    const result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  status(): i32 {
    const result = super.call("status", "status():(uint8)", []);

    return result[0].toI32();
  }

  try_status(): ethereum.CallResult<i32> {
    const result = super.tryCall("status", "status():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  toke(): Address {
    const result = super.call("toke", "toke():(address)", []);

    return result[0].toAddress();
  }

  try_toke(): ethereum.CallResult<Address> {
    const result = super.tryCall("toke", "toke():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokeAvailable(scheduleIndex: BigInt): BigInt {
    const result = super.call(
      "tokeAvailable",
      "tokeAvailable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(scheduleIndex)]
    );

    return result[0].toBigInt();
  }

  try_tokeAvailable(scheduleIndex: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "tokeAvailable",
      "tokeAvailable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(scheduleIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokeDeposited(): BigInt {
    const result = super.call("tokeDeposited", "tokeDeposited():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokeDeposited(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "tokeDeposited",
      "tokeDeposited():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIds(param0: BigInt): BigInt {
    const result = super.call("tokenIds", "tokenIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tokenIds(param0: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall("tokenIds", "tokenIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokens(): Array<Address> {
    const result = super.call("tokens", "tokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_tokens(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall("tokens", "tokens():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  totalWithdrawInitialized(): boolean {
    const result = super.call(
      "totalWithdrawInitialized",
      "totalWithdrawInitialized():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_totalWithdrawInitialized(): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "totalWithdrawInitialized",
      "totalWithdrawInitialized():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  utilityTokens(): Array<Address> {
    const result = super.call("utilityTokens", "utilityTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_utilityTokens(): ethereum.CallResult<Array<Address>> {
    const result = super.tryCall(
      "utilityTokens",
      "utilityTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  version(): string {
    const result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    const result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  voting(): Address {
    const result = super.call("voting", "voting():(address)", []);

    return result[0].toAddress();
  }

  try_voting(): ethereum.CallResult<Address> {
    const result = super.tryCall("voting", "voting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class AddIdCall extends ethereum.Call {
  get inputs(): AddIdCall__Inputs {
    return new AddIdCall__Inputs(this);
  }

  get outputs(): AddIdCall__Outputs {
    return new AddIdCall__Outputs(this);
  }
}

export class AddIdCall__Inputs {
  _call: AddIdCall;

  constructor(call: AddIdCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddIdCall__Outputs {
  _call: AddIdCall;

  constructor(call: AddIdCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get reactor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class DeactivateCall extends ethereum.Call {
  get inputs(): DeactivateCall__Inputs {
    return new DeactivateCall__Inputs(this);
  }

  get outputs(): DeactivateCall__Outputs {
    return new DeactivateCall__Outputs(this);
  }
}

export class DeactivateCall__Inputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }

  get panic(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class DeactivateCall__Outputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class DeallocateCall extends ethereum.Call {
  get inputs(): DeallocateCall__Inputs {
    return new DeallocateCall__Inputs(this);
  }

  get outputs(): DeallocateCall__Outputs {
    return new DeallocateCall__Outputs(this);
  }
}

export class DeallocateCall__Inputs {
  _call: DeallocateCall;

  constructor(call: DeallocateCall) {
    this._call = call;
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class DeallocateCall__Outputs {
  _call: DeallocateCall;

  constructor(call: DeallocateCall) {
    this._call = call;
  }
}

export class ExecuteArbitraryCall extends ethereum.Call {
  get inputs(): ExecuteArbitraryCall__Inputs {
    return new ExecuteArbitraryCall__Inputs(this);
  }

  get outputs(): ExecuteArbitraryCall__Outputs {
    return new ExecuteArbitraryCall__Outputs(this);
  }
}

export class ExecuteArbitraryCall__Inputs {
  _call: ExecuteArbitraryCall;

  constructor(call: ExecuteArbitraryCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteArbitraryCall__Outputs {
  _call: ExecuteArbitraryCall;

  constructor(call: ExecuteArbitraryCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class PrepareMigrationCall extends ethereum.Call {
  get inputs(): PrepareMigrationCall__Inputs {
    return new PrepareMigrationCall__Inputs(this);
  }

  get outputs(): PrepareMigrationCall__Outputs {
    return new PrepareMigrationCall__Outputs(this);
  }
}

export class PrepareMigrationCall__Inputs {
  _call: PrepareMigrationCall;

  constructor(call: PrepareMigrationCall) {
    this._call = call;
  }
}

export class PrepareMigrationCall__Outputs {
  _call: PrepareMigrationCall;

  constructor(call: PrepareMigrationCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get _newAuthority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetTokemakDataCall extends ethereum.Call {
  get inputs(): SetTokemakDataCall__Inputs {
    return new SetTokemakDataCall__Inputs(this);
  }

  get outputs(): SetTokemakDataCall__Outputs {
    return new SetTokemakDataCall__Outputs(this);
  }
}

export class SetTokemakDataCall__Inputs {
  _call: SetTokemakDataCall;

  constructor(call: SetTokemakDataCall) {
    this._call = call;
  }

  get tokeData(): SetTokemakDataCallTokeDataStruct {
    return changetype<SetTokemakDataCallTokeDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetTokemakDataCall__Outputs {
  _call: SetTokemakDataCall;

  constructor(call: SetTokemakDataCall) {
    this._call = call;
  }
}

export class SetTokemakDataCallTokeDataStruct extends ethereum.Tuple {
  get voting(): Address {
    return this[0].toAddress();
  }

  get staking(): Address {
    return this[1].toAddress();
  }

  get rewards(): Address {
    return this[2].toAddress();
  }

  get manager(): Address {
    return this[3].toAddress();
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateClaimPayloadCall extends ethereum.Call {
  get inputs(): UpdateClaimPayloadCall__Inputs {
    return new UpdateClaimPayloadCall__Inputs(this);
  }

  get outputs(): UpdateClaimPayloadCall__Outputs {
    return new UpdateClaimPayloadCall__Outputs(this);
  }
}

export class UpdateClaimPayloadCall__Inputs {
  _call: UpdateClaimPayloadCall;

  constructor(call: UpdateClaimPayloadCall) {
    this._call = call;
  }

  get data(): UpdateClaimPayloadCallDataStruct {
    return changetype<UpdateClaimPayloadCallDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class UpdateClaimPayloadCall__Outputs {
  _call: UpdateClaimPayloadCall;

  constructor(call: UpdateClaimPayloadCall) {
    this._call = call;
  }
}

export class UpdateClaimPayloadCallDataStruct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get cycle(): BigInt {
    return this[1].toBigInt();
  }

  get v(): BigInt {
    return this[2].toBigInt();
  }

  get r(): Bytes {
    return this[3].toBytes();
  }

  get s(): Bytes {
    return this[4].toBytes();
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get payload(): VoteCallPayloadStruct {
    return changetype<VoteCallPayloadStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class VoteCallPayloadStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get voteSessionKey(): Bytes {
    return this[1].toBytes();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }

  get chainId(): BigInt {
    return this[3].toBigInt();
  }

  get totalVotes(): BigInt {
    return this[4].toBigInt();
  }

  get allocations(): Array<VoteCallPayloadAllocationsStruct> {
    return this[5].toTupleArray<VoteCallPayloadAllocationsStruct>();
  }
}

export class VoteCallPayloadAllocationsStruct extends ethereum.Tuple {
  get reactorKey(): Bytes {
    return this[0].toBytes();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}
