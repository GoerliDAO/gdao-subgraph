// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap} from "@graphprotocol/graph-ts";

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleIx(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DestinationsSet extends ethereum.Event {
  get params(): DestinationsSet__Params {
    return new DestinationsSet__Params(this);
  }
}

export class DestinationsSet__Params {
  _event: DestinationsSet;

  constructor(event: DestinationsSet) {
    this._event = event;
  }

  get fxStateSender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get destinationOnL2(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EventSendSet extends ethereum.Event {
  get params(): EventSendSet__Params {
    return new EventSendSet__Params(this);
  }
}

export class EventSendSet__Params {
  _event: EventSendSet;

  constructor(event: EventSendSet) {
    this._event = event;
  }

  get eventSendSet(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class NotionalAddressesSet extends ethereum.Event {
  get params(): NotionalAddressesSet__Params {
    return new NotionalAddressesSet__Params(this);
  }
}

export class NotionalAddressesSet__Params {
  _event: NotionalAddressesSet;

  constructor(event: NotionalAddressesSet) {
    this._event = event;
  }

  get scheduleIdxs(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get addresses(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PermissionedDepositorSet extends ethereum.Event {
  get params(): PermissionedDepositorSet__Params {
    return new PermissionedDepositorSet__Params(this);
  }
}

export class PermissionedDepositorSet__Params {
  _event: PermissionedDepositorSet;

  constructor(event: PermissionedDepositorSet) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get allowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class QueuedTransferRejected extends ethereum.Event {
  get params(): QueuedTransferRejected__Params {
    return new QueuedTransferRejected__Params(this);
  }
}

export class QueuedTransferRejected__Params {
  _event: QueuedTransferRejected;

  constructor(event: QueuedTransferRejected) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get scheduleFrom(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleTo(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class QueuedTransferRemoved extends ethereum.Event {
  get params(): QueuedTransferRemoved__Params {
    return new QueuedTransferRemoved__Params(this);
  }
}

export class QueuedTransferRemoved__Params {
  _event: QueuedTransferRemoved;

  constructor(event: QueuedTransferRemoved) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get scheduleFrom(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleTo(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class ScheduleAdded extends ethereum.Event {
  get params(): ScheduleAdded__Params {
    return new ScheduleAdded__Params(this);
  }
}

export class ScheduleAdded__Params {
  _event: ScheduleAdded;

  constructor(event: ScheduleAdded) {
    this._event = event;
  }

  get scheduleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cliff(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interval(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get setup(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get isActive(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get hardStart(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get notional(): Address {
    return this._event.parameters[7].value.toAddress();
  }
}

export class ScheduleRemoved extends ethereum.Event {
  get params(): ScheduleRemoved__Params {
    return new ScheduleRemoved__Params(this);
  }
}

export class ScheduleRemoved__Params {
  _event: ScheduleRemoved;

  constructor(event: ScheduleRemoved) {
    this._event = event;
  }

  get scheduleIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ScheduleStatusSet extends ethereum.Event {
  get params(): ScheduleStatusSet__Params {
    return new ScheduleStatusSet__Params(this);
  }
}

export class ScheduleStatusSet__Params {
  _event: ScheduleStatusSet;

  constructor(event: ScheduleStatusSet) {
    this._event = event;
  }

  get scheduleId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isActive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Slashed extends ethereum.Event {
  get params(): Slashed__Params {
    return new Slashed__Params(this);
  }
}

export class Slashed__Params {
  _event: Slashed;

  constructor(event: Slashed) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleIx(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeTransferred extends ethereum.Event {
  get params(): StakeTransferred__Params {
    return new StakeTransferred__Params(this);
  }
}

export class StakeTransferred__Params {
  _event: StakeTransferred;

  constructor(event: StakeTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get scheduleFrom(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleTo(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class TransferApproverSet extends ethereum.Event {
  get params(): TransferApproverSet__Params {
    return new TransferApproverSet__Params(this);
  }
}

export class TransferApproverSet__Params {
  _event: TransferApproverSet;

  constructor(event: TransferApproverSet) {
    this._event = event;
  }

  get approverAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TransferQueued extends ethereum.Event {
  get params(): TransferQueued__Params {
    return new TransferQueued__Params(this);
  }
}

export class TransferQueued__Params {
  _event: TransferQueued;

  constructor(event: TransferQueued) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get scheduleFrom(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleTo(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserSchedulesSet extends ethereum.Event {
  get params(): UserSchedulesSet__Params {
    return new UserSchedulesSet__Params(this);
  }
}

export class UserSchedulesSet__Params {
  _event: UserSchedulesSet;

  constructor(event: UserSchedulesSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get userSchedulesIdxs(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class WithdrawCompleted extends ethereum.Event {
  get params(): WithdrawCompleted__Params {
    return new WithdrawCompleted__Params(this);
  }
}

export class WithdrawCompleted__Params {
  _event: WithdrawCompleted;

  constructor(event: WithdrawCompleted) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get scheduleIdx(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WithdrawalRequested extends ethereum.Event {
  get params(): WithdrawalRequested__Params {
    return new WithdrawalRequested__Params(this);
  }
}

export class WithdrawalRequested__Params {
  _event: WithdrawalRequested;

  constructor(event: WithdrawalRequested) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get scheduleIdx(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ZeroSweep extends ethereum.Event {
  get params(): ZeroSweep__Params {
    return new ZeroSweep__Params(this);
  }
}

export class ZeroSweep__Params {
  _event: ZeroSweep;

  constructor(event: ZeroSweep) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scheduleFrom(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokemakStaking__destinationsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getFxStateSender(): Address {
    return this.value0;
  }

  getDestinationOnL2(): Address {
    return this.value1;
  }
}

export class TokemakStaking__getSchedulesResultRetSchedulesStruct extends ethereum.Tuple {
  get schedule(): TokemakStaking__getSchedulesResultRetSchedulesScheduleStruct {
    return changetype<
      TokemakStaking__getSchedulesResultRetSchedulesScheduleStruct
    >(this[0].toTuple());
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }
}

export class TokemakStaking__getSchedulesResultRetSchedulesScheduleStruct extends ethereum.Tuple {
  get cliff(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get interval(): BigInt {
    return this[2].toBigInt();
  }

  get setup(): boolean {
    return this[3].toBoolean();
  }

  get isActive(): boolean {
    return this[4].toBoolean();
  }

  get hardStart(): BigInt {
    return this[5].toBigInt();
  }

  get isPublic(): boolean {
    return this[6].toBoolean();
  }
}

export class TokemakStaking__getStakesResultStakesStruct extends ethereum.Tuple {
  get initial(): BigInt {
    return this[0].toBigInt();
  }

  get withdrawn(): BigInt {
    return this[1].toBigInt();
  }

  get slashed(): BigInt {
    return this[2].toBigInt();
  }

  get started(): BigInt {
    return this[3].toBigInt();
  }

  get scheduleIx(): BigInt {
    return this[4].toBigInt();
  }
}

export class TokemakStaking__requestedWithdrawalsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMinCycleIndex(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class TokemakStaking__schedulesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;
  value4: boolean;
  value5: BigInt;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: boolean,
    value4: boolean,
    value5: BigInt,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getCliff(): BigInt {
    return this.value0;
  }

  getDuration(): BigInt {
    return this.value1;
  }

  getInterval(): BigInt {
    return this.value2;
  }

  getSetup(): boolean {
    return this.value3;
  }

  getIsActive(): boolean {
    return this.value4;
  }

  getHardStart(): BigInt {
    return this.value5;
  }

  getIsPublic(): boolean {
    return this.value6;
  }
}

export class TokemakStaking__userStakingsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getInitial(): BigInt {
    return this.value0;
  }

  getWithdrawn(): BigInt {
    return this.value1;
  }

  getSlashed(): BigInt {
    return this.value2;
  }

  getStarted(): BigInt {
    return this.value3;
  }

  getScheduleIx(): BigInt {
    return this.value4;
  }
}

export class TokemakStaking__withdrawalRequestsByIndexResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMinCycleIndex(): BigInt {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class TokemakStaking extends ethereum.SmartContract {
  static bind(address: Address): TokemakStaking {
    return new TokemakStaking("TokemakStaking", address);
  }

  _eventSend(): boolean {
    const result = super.call("_eventSend", "_eventSend():(bool)", []);

    return result[0].toBoolean();
  }

  try__eventSend(): ethereum.CallResult<boolean> {
    const result = super.tryCall("_eventSend", "_eventSend():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableForWithdrawal(account: Address, scheduleIndex: BigInt): BigInt {
    const result = super.call(
      "availableForWithdrawal",
      "availableForWithdrawal(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(scheduleIndex)
      ]
    );

    return result[0].toBigInt();
  }

  try_availableForWithdrawal(
    account: Address,
    scheduleIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "availableForWithdrawal",
      "availableForWithdrawal(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(scheduleIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    const result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegateFunction(): Address {
    const result = super.call(
      "delegateFunction",
      "delegateFunction():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_delegateFunction(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "delegateFunction",
      "delegateFunction():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  destinations(): TokemakStaking__destinationsResult {
    const result = super.call(
      "destinations",
      "destinations():(address,address)",
      []
    );

    return new TokemakStaking__destinationsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_destinations(): ethereum.CallResult<TokemakStaking__destinationsResult> {
    const result = super.tryCall(
      "destinations",
      "destinations():(address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TokemakStaking__destinationsResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  getSchedules(): Array<TokemakStaking__getSchedulesResultRetSchedulesStruct> {
    const result = super.call(
      "getSchedules",
      "getSchedules():(((uint256,uint256,uint256,bool,bool,uint256,bool),uint256)[])",
      []
    );

    return result[0].toTupleArray<
      TokemakStaking__getSchedulesResultRetSchedulesStruct
    >();
  }

  try_getSchedules(): ethereum.CallResult<
    Array<TokemakStaking__getSchedulesResultRetSchedulesStruct>
  > {
    const result = super.tryCall(
      "getSchedules",
      "getSchedules():(((uint256,uint256,uint256,bool,bool,uint256,bool),uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        TokemakStaking__getSchedulesResultRetSchedulesStruct
      >()
    );
  }

  getStakes(
    account: Address
  ): Array<TokemakStaking__getStakesResultStakesStruct> {
    const result = super.call(
      "getStakes",
      "getStakes(address):((uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toTupleArray<
      TokemakStaking__getStakesResultStakesStruct
    >();
  }

  try_getStakes(
    account: Address
  ): ethereum.CallResult<Array<TokemakStaking__getStakesResultStakesStruct>> {
    const result = super.tryCall(
      "getStakes",
      "getStakes(address):((uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<TokemakStaking__getStakesResultStakesStruct>()
    );
  }

  manager(): Address {
    const result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    const result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextScheduleIndex(): BigInt {
    const result = super.call(
      "nextScheduleIndex",
      "nextScheduleIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextScheduleIndex(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "nextScheduleIndex",
      "nextScheduleIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  notionalAddresses(param0: BigInt): Address {
    const result = super.call(
      "notionalAddresses",
      "notionalAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_notionalAddresses(param0: BigInt): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "notionalAddresses",
      "notionalAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    const result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    const result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    const result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    const result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  permissionedDepositors(param0: Address): boolean {
    const result = super.call(
      "permissionedDepositors",
      "permissionedDepositors(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_permissionedDepositors(param0: Address): ethereum.CallResult<boolean> {
    const result = super.tryCall(
      "permissionedDepositors",
      "permissionedDepositors(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  requestedWithdrawals(
    param0: Address
  ): TokemakStaking__requestedWithdrawalsResult {
    const result = super.call(
      "requestedWithdrawals",
      "requestedWithdrawals(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new TokemakStaking__requestedWithdrawalsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_requestedWithdrawals(
    param0: Address
  ): ethereum.CallResult<TokemakStaking__requestedWithdrawalsResult> {
    const result = super.tryCall(
      "requestedWithdrawals",
      "requestedWithdrawals(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TokemakStaking__requestedWithdrawalsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  schedules(param0: BigInt): TokemakStaking__schedulesResult {
    const result = super.call(
      "schedules",
      "schedules(uint256):(uint256,uint256,uint256,bool,bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new TokemakStaking__schedulesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBoolean()
    );
  }

  try_schedules(
    param0: BigInt
  ): ethereum.CallResult<TokemakStaking__schedulesResult> {
    const result = super.tryCall(
      "schedules",
      "schedules(uint256):(uint256,uint256,uint256,bool,bool,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TokemakStaking__schedulesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBoolean()
      )
    );
  }

  tokeToken(): Address {
    const result = super.call("tokeToken", "tokeToken():(address)", []);

    return result[0].toAddress();
  }

  try_tokeToken(): ethereum.CallResult<Address> {
    const result = super.tryCall("tokeToken", "tokeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    const result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    const result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unvested(account: Address, scheduleIndex: BigInt): BigInt {
    const result = super.call("unvested", "unvested(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(scheduleIndex)
    ]);

    return result[0].toBigInt();
  }

  try_unvested(
    account: Address,
    scheduleIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "unvested",
      "unvested(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(scheduleIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakingSchedules(param0: Address, param1: BigInt): BigInt {
    const result = super.call(
      "userStakingSchedules",
      "userStakingSchedules(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userStakingSchedules(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "userStakingSchedules",
      "userStakingSchedules(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userStakings(
    param0: Address,
    param1: BigInt
  ): TokemakStaking__userStakingsResult {
    const result = super.call(
      "userStakings",
      "userStakings(address,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TokemakStaking__userStakingsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_userStakings(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TokemakStaking__userStakingsResult> {
    const result = super.tryCall(
      "userStakings",
      "userStakings(address,uint256):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TokemakStaking__userStakingsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  vested(account: Address, scheduleIndex: BigInt): BigInt {
    const result = super.call("vested", "vested(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(scheduleIndex)
    ]);

    return result[0].toBigInt();
  }

  try_vested(
    account: Address,
    scheduleIndex: BigInt
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall("vested", "vested(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(scheduleIndex)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawalRequestsByIndex(
    param0: Address,
    param1: BigInt
  ): TokemakStaking__withdrawalRequestsByIndexResult {
    const result = super.call(
      "withdrawalRequestsByIndex",
      "withdrawalRequestsByIndex(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new TokemakStaking__withdrawalRequestsByIndexResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawalRequestsByIndex(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<TokemakStaking__withdrawalRequestsByIndexResult> {
    const result = super.tryCall(
      "withdrawalRequestsByIndex",
      "withdrawalRequestsByIndex(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new TokemakStaking__withdrawalRequestsByIndexResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  withheldLiquidity(): BigInt {
    const result = super.call(
      "withheldLiquidity",
      "withheldLiquidity():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_withheldLiquidity(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "withheldLiquidity",
      "withheldLiquidity():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddScheduleCall extends ethereum.Call {
  get inputs(): AddScheduleCall__Inputs {
    return new AddScheduleCall__Inputs(this);
  }

  get outputs(): AddScheduleCall__Outputs {
    return new AddScheduleCall__Outputs(this);
  }
}

export class AddScheduleCall__Inputs {
  _call: AddScheduleCall;

  constructor(call: AddScheduleCall) {
    this._call = call;
  }

  get schedule(): AddScheduleCallScheduleStruct {
    return changetype<AddScheduleCallScheduleStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get notional(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddScheduleCall__Outputs {
  _call: AddScheduleCall;

  constructor(call: AddScheduleCall) {
    this._call = call;
  }
}

export class AddScheduleCallScheduleStruct extends ethereum.Tuple {
  get cliff(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get interval(): BigInt {
    return this[2].toBigInt();
  }

  get setup(): boolean {
    return this[3].toBoolean();
  }

  get isActive(): boolean {
    return this[4].toBoolean();
  }

  get hardStart(): BigInt {
    return this[5].toBigInt();
  }

  get isPublic(): boolean {
    return this[6].toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class Deposit1Call extends ethereum.Call {
  get inputs(): Deposit1Call__Inputs {
    return new Deposit1Call__Inputs(this);
  }

  get outputs(): Deposit1Call__Outputs {
    return new Deposit1Call__Outputs(this);
  }
}

export class Deposit1Call__Inputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get scheduleIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Deposit1Call__Outputs {
  _call: Deposit1Call;

  constructor(call: Deposit1Call) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get scheduleIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class DepositWithScheduleCall extends ethereum.Call {
  get inputs(): DepositWithScheduleCall__Inputs {
    return new DepositWithScheduleCall__Inputs(this);
  }

  get outputs(): DepositWithScheduleCall__Outputs {
    return new DepositWithScheduleCall__Outputs(this);
  }
}

export class DepositWithScheduleCall__Inputs {
  _call: DepositWithScheduleCall;

  constructor(call: DepositWithScheduleCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get schedule(): DepositWithScheduleCallScheduleStruct {
    return changetype<DepositWithScheduleCallScheduleStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get notional(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DepositWithScheduleCall__Outputs {
  _call: DepositWithScheduleCall;

  constructor(call: DepositWithScheduleCall) {
    this._call = call;
  }
}

export class DepositWithScheduleCallScheduleStruct extends ethereum.Tuple {
  get cliff(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }

  get interval(): BigInt {
    return this[2].toBigInt();
  }

  get setup(): boolean {
    return this[3].toBoolean();
  }

  get isActive(): boolean {
    return this[4].toBoolean();
  }

  get hardStart(): BigInt {
    return this[5].toBigInt();
  }

  get isPublic(): boolean {
    return this[6].toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _tokeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _manager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _scheduleZeroNotional(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestWithdrawalCall extends ethereum.Call {
  get inputs(): RequestWithdrawalCall__Inputs {
    return new RequestWithdrawalCall__Inputs(this);
  }

  get outputs(): RequestWithdrawalCall__Outputs {
    return new RequestWithdrawalCall__Outputs(this);
  }
}

export class RequestWithdrawalCall__Inputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get scheduleIdx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestWithdrawalCall__Outputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }
}

export class SetDestinationsCall extends ethereum.Call {
  get inputs(): SetDestinationsCall__Inputs {
    return new SetDestinationsCall__Inputs(this);
  }

  get outputs(): SetDestinationsCall__Outputs {
    return new SetDestinationsCall__Outputs(this);
  }
}

export class SetDestinationsCall__Inputs {
  _call: SetDestinationsCall;

  constructor(call: SetDestinationsCall) {
    this._call = call;
  }

  get _fxStateSender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _destinationOnL2(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetDestinationsCall__Outputs {
  _call: SetDestinationsCall;

  constructor(call: SetDestinationsCall) {
    this._call = call;
  }
}

export class SetEventSendCall extends ethereum.Call {
  get inputs(): SetEventSendCall__Inputs {
    return new SetEventSendCall__Inputs(this);
  }

  get outputs(): SetEventSendCall__Outputs {
    return new SetEventSendCall__Outputs(this);
  }
}

export class SetEventSendCall__Inputs {
  _call: SetEventSendCall;

  constructor(call: SetEventSendCall) {
    this._call = call;
  }

  get _eventSendSet(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEventSendCall__Outputs {
  _call: SetEventSendCall;

  constructor(call: SetEventSendCall) {
    this._call = call;
  }
}

export class SetNotionalAddressesCall extends ethereum.Call {
  get inputs(): SetNotionalAddressesCall__Inputs {
    return new SetNotionalAddressesCall__Inputs(this);
  }

  get outputs(): SetNotionalAddressesCall__Outputs {
    return new SetNotionalAddressesCall__Outputs(this);
  }
}

export class SetNotionalAddressesCall__Inputs {
  _call: SetNotionalAddressesCall;

  constructor(call: SetNotionalAddressesCall) {
    this._call = call;
  }

  get scheduleIdxArr(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetNotionalAddressesCall__Outputs {
  _call: SetNotionalAddressesCall;

  constructor(call: SetNotionalAddressesCall) {
    this._call = call;
  }
}

export class SetPermissionedDepositorCall extends ethereum.Call {
  get inputs(): SetPermissionedDepositorCall__Inputs {
    return new SetPermissionedDepositorCall__Inputs(this);
  }

  get outputs(): SetPermissionedDepositorCall__Outputs {
    return new SetPermissionedDepositorCall__Outputs(this);
  }
}

export class SetPermissionedDepositorCall__Inputs {
  _call: SetPermissionedDepositorCall;

  constructor(call: SetPermissionedDepositorCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get canDeposit(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPermissionedDepositorCall__Outputs {
  _call: SetPermissionedDepositorCall;

  constructor(call: SetPermissionedDepositorCall) {
    this._call = call;
  }
}

export class SetScheduleStatusCall extends ethereum.Call {
  get inputs(): SetScheduleStatusCall__Inputs {
    return new SetScheduleStatusCall__Inputs(this);
  }

  get outputs(): SetScheduleStatusCall__Outputs {
    return new SetScheduleStatusCall__Outputs(this);
  }
}

export class SetScheduleStatusCall__Inputs {
  _call: SetScheduleStatusCall;

  constructor(call: SetScheduleStatusCall) {
    this._call = call;
  }

  get scheduleId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get activeBool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetScheduleStatusCall__Outputs {
  _call: SetScheduleStatusCall;

  constructor(call: SetScheduleStatusCall) {
    this._call = call;
  }
}

export class SetUserSchedulesCall extends ethereum.Call {
  get inputs(): SetUserSchedulesCall__Inputs {
    return new SetUserSchedulesCall__Inputs(this);
  }

  get outputs(): SetUserSchedulesCall__Outputs {
    return new SetUserSchedulesCall__Outputs(this);
  }
}

export class SetUserSchedulesCall__Inputs {
  _call: SetUserSchedulesCall;

  constructor(call: SetUserSchedulesCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get userSchedulesIdxs(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetUserSchedulesCall__Outputs {
  _call: SetUserSchedulesCall;

  constructor(call: SetUserSchedulesCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get scheduleIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class Withdraw1Call extends ethereum.Call {
  get inputs(): Withdraw1Call__Inputs {
    return new Withdraw1Call__Inputs(this);
  }

  get outputs(): Withdraw1Call__Outputs {
    return new Withdraw1Call__Outputs(this);
  }
}

export class Withdraw1Call__Inputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get scheduleIdx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Withdraw1Call__Outputs {
  _call: Withdraw1Call;

  constructor(call: Withdraw1Call) {
    this._call = call;
  }
}
